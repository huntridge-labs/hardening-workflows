name: Code Quality and Linting Pipeline

on:
  workflow_call:
    outputs:
      linting_status:
        description: "Overall linting status"
        value: ${{ jobs.linting-summary.outputs.status }}
      issues_found:
        description: "Number of issues found"
        value: ${{ jobs.linting-summary.outputs.issues_found }}
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  yaml-lint:
    name: YAML Linting
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      yaml_issues: ${{ steps.yaml-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install yamllint
      run: |
        pip install yamllint
        
    - name: Run YAML linting
      id: yaml-check
      continue-on-error: true  # Never fail the pipeline on linting issues
      run: |
        echo "🔍 Running YAML linting..."
        
        # Create output file for issues
        ISSUES_FILE="/tmp/yaml_issues.txt"
        
        # Run yamllint and capture issues
        yamllint . --format parsable > "$ISSUES_FILE" 2>&1 || true
        
        # Count issues
        ISSUE_COUNT=$(wc -l < "$ISSUES_FILE" 2>/dev/null || echo "0")
        
        echo "issues=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        
        # Display results
        if [ "$ISSUE_COUNT" -gt 0 ]; then
          echo "⚠️  Found $ISSUE_COUNT YAML linting issues:"
          cat "$ISSUES_FILE" || echo "Could not display issues file"
          
          # Create annotation for PR
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=YAML Linting Issues::Found $ISSUE_COUNT YAML formatting/syntax issues. See job logs for details."
          fi
        else
          echo "✅ No YAML linting issues found"
        fi
        
    - name: Upload YAML lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: yaml-lint-results
        path: /tmp/yaml_issues.txt
        retention-days: 7

  json-lint:
    name: JSON Validation
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      json_issues: ${{ steps.json-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install JSON linting tools
      run: |
        npm install -g jsonlint
        
    - name: Run JSON validation
      id: json-check
      continue-on-error: true  # Never fail the pipeline on validation errors
      run: |
        echo "🔍 Running JSON validation..."
        
        ISSUES_FILE="/tmp/json_issues.txt"
        ISSUE_COUNT=0
        
        # Find all JSON files
        find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | while read -r file; do
          echo "Checking: $file"
          if ! jsonlint "$file" >/dev/null 2>&1; then
            echo "❌ JSON syntax error in: $file" | tee -a "$ISSUES_FILE"
            jsonlint "$file" 2>&1 | sed "s/^/  /" | tee -a "$ISSUES_FILE"
          fi
        done
        
        # Count actual issues
        if [ -f "$ISSUES_FILE" ]; then
          ACTUAL_COUNT=$(grep -c "❌" "$ISSUES_FILE" || echo "0")
        else
          ACTUAL_COUNT=0
        fi
        
        echo "issues=$ACTUAL_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$ACTUAL_COUNT" -gt 0 ]; then
          echo "⚠️  Found $ACTUAL_COUNT JSON validation issues"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=JSON Validation Issues::Found $ACTUAL_COUNT JSON syntax/formatting issues. See job logs for details."
          fi
        else
          echo "✅ No JSON validation issues found"
        fi
        
    - name: Upload JSON lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: json-lint-results
        path: /tmp/json_issues.txt
        retention-days: 7

  python-lint:
    name: Python Code Quality
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      python_issues: ${{ steps.python-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python linting tools
      run: |
        pip install --upgrade pip
        pip install flake8 pylint bandit black isort safety
        
    - name: Run Python syntax check
      id: python-check
      continue-on-error: true  # Never fail the pipeline on linting issues
      run: |
        echo "🔍 Running Python code quality checks..."
        
        ISSUES_FILE="/tmp/python_issues.txt"
        TOTAL_ISSUES=0
        
        # Find Python files
        PYTHON_FILES=$(find . -name "*.py" -not -path "./node_modules/*" -not -path "./.git/*" -not -path "./.venv/*" -not -path "./venv/*")
        
        if [ -z "$PYTHON_FILES" ]; then
          echo "ℹ️  No Python files found to lint"
          echo "issues=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found Python files to check:"
        echo "$PYTHON_FILES"
        
        # Flake8 for style and syntax
        echo -e "\n📋 Running Flake8 (style/syntax)..." | tee -a "$ISSUES_FILE"
        if ! flake8 $PYTHON_FILES --max-line-length=120 --extend-ignore=E203,W503 --statistics > /tmp/flake8.out 2>&1; then
          FLAKE8_ISSUES=$(grep -c ": " /tmp/flake8.out || echo "0")
          echo "⚠️  Flake8 found $FLAKE8_ISSUES style/syntax issues:" | tee -a "$ISSUES_FILE"
          cat /tmp/flake8.out | tee -a "$ISSUES_FILE"
          TOTAL_ISSUES=$((TOTAL_ISSUES + FLAKE8_ISSUES))
        else
          echo "✅ No Flake8 issues found" | tee -a "$ISSUES_FILE"
        fi
        
        # Bandit for security issues
        echo -e "\n🔒 Running Bandit (security)..." | tee -a "$ISSUES_FILE"
        if ! bandit -r . -f txt -o /tmp/bandit.out -x "./node_modules/*,./venv/*,./.venv/*" 2>/dev/null; then
          BANDIT_ISSUES=$(grep -c "Issue:" /tmp/bandit.out || echo "0")
          if [ "$BANDIT_ISSUES" -gt 0 ]; then
            echo "⚠️  Bandit found $BANDIT_ISSUES potential security issues:" | tee -a "$ISSUES_FILE"
            cat /tmp/bandit.out | tee -a "$ISSUES_FILE"
            TOTAL_ISSUES=$((TOTAL_ISSUES + BANDIT_ISSUES))
          fi
        else
          echo "✅ No Bandit security issues found" | tee -a "$ISSUES_FILE"
        fi
        
        echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_ISSUES" -gt 0 ]; then
          echo "⚠️  Total Python issues found: $TOTAL_ISSUES"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=Python Code Quality Issues::Found $TOTAL_ISSUES Python linting/security issues. See job logs for details."
          fi
        else
          echo "✅ No Python code quality issues found"
        fi
        
    - name: Upload Python lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: python-lint-results
        path: /tmp/python_issues.txt
        retention-days: 7

  javascript-lint:
    name: JavaScript Code Quality
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      js_issues: ${{ steps.js-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install JavaScript linting tools
      run: |
        npm install -g eslint jshint
        
    - name: Run JavaScript linting
      id: js-check
      continue-on-error: true  # Never fail the pipeline on linting issues
      run: |
        echo "🔍 Running JavaScript code quality checks..."
        
        ISSUES_FILE="/tmp/js_issues.txt"
        TOTAL_ISSUES=0
        
        # Find JavaScript files
        JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*")
        
        if [ -z "$JS_FILES" ]; then
          echo "ℹ️  No JavaScript files found to lint"
          echo "issues=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found JavaScript files to check:"
        echo "$JS_FILES"
        
        # Basic syntax check with Node.js
        echo -e "\n📋 Running JavaScript syntax check..." | tee -a "$ISSUES_FILE"
        for file in $JS_FILES; do
          if ! node -c "$file" 2>/dev/null; then
            echo "❌ Syntax error in: $file" | tee -a "$ISSUES_FILE"
            node -c "$file" 2>&1 | sed "s/^/  /" | tee -a "$ISSUES_FILE" || true
            TOTAL_ISSUES=$((TOTAL_ISSUES + 1))
          fi
        done
        
        # JSHint for code quality
        echo -e "\n📊 Running JSHint (code quality)..." | tee -a "$ISSUES_FILE"
        if ! jshint $JS_FILES > /tmp/jshint.out 2>&1; then
          JSHINT_ISSUES=$(wc -l < /tmp/jshint.out || echo "0")
          if [ "$JSHINT_ISSUES" -gt 0 ]; then
            echo "⚠️  JSHint found $JSHINT_ISSUES code quality issues:" | tee -a "$ISSUES_FILE"
            cat /tmp/jshint.out | tee -a "$ISSUES_FILE"
            TOTAL_ISSUES=$((TOTAL_ISSUES + JSHINT_ISSUES))
          fi
        else
          echo "✅ No JSHint issues found" | tee -a "$ISSUES_FILE"
        fi
        
        echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_ISSUES" -gt 0 ]; then
          echo "⚠️  Total JavaScript issues found: $TOTAL_ISSUES"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=JavaScript Code Quality Issues::Found $TOTAL_ISSUES JavaScript linting issues. See job logs for details."
          fi
        else
          echo "✅ No JavaScript code quality issues found"
        fi
        
    - name: Upload JavaScript lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: js-lint-results
        path: /tmp/js_issues.txt
        retention-days: 7

  dockerfile-lint:
    name: Dockerfile Linting
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      docker_issues: ${{ steps.docker-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Hadolint
      run: |
        wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x /usr/local/bin/hadolint
        
    - name: Run Dockerfile linting
      id: docker-check
      continue-on-error: true  # Never fail the pipeline on linting issues
      run: |
        echo "🔍 Running Dockerfile linting..."
        
        ISSUES_FILE="/tmp/docker_issues.txt"
        TOTAL_ISSUES=0
        
        # Find Dockerfiles
        DOCKERFILES=$(find . -name "Dockerfile*" -not -path "./.git/*")
        
        if [ -z "$DOCKERFILES" ]; then
          echo "ℹ️  No Dockerfiles found to lint"
          echo "issues=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found Dockerfiles to check:"
        echo "$DOCKERFILES"
        
        # Run Hadolint on each Dockerfile
        for dockerfile in $DOCKERFILES; do
          echo -e "\n📋 Checking: $dockerfile" | tee -a "$ISSUES_FILE"
          if ! hadolint "$dockerfile" > /tmp/hadolint_single.out 2>&1; then
            SINGLE_ISSUES=$(wc -l < /tmp/hadolint_single.out || echo "0")
            echo "⚠️  Found $SINGLE_ISSUES issues in $dockerfile:" | tee -a "$ISSUES_FILE"
            cat /tmp/hadolint_single.out | tee -a "$ISSUES_FILE"
            TOTAL_ISSUES=$((TOTAL_ISSUES + SINGLE_ISSUES))
          else
            echo "✅ No issues found in $dockerfile" | tee -a "$ISSUES_FILE"
          fi
        done
        
        echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_ISSUES" -gt 0 ]; then
          echo "⚠️  Total Dockerfile issues found: $TOTAL_ISSUES"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=Dockerfile Linting Issues::Found $TOTAL_ISSUES Dockerfile best practice violations. See job logs for details."
          fi
        else
          echo "✅ No Dockerfile linting issues found"
        fi
        
    - name: Upload Dockerfile lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dockerfile-lint-results
        path: /tmp/docker_issues.txt
        retention-days: 7

  terraform-lint:
    name: Terraform Linting
    runs-on: ubuntu-latest
    continue-on-error: true  # Never hard fail the pipeline
    outputs:
      terraform_issues: ${{ steps.terraform-check.outputs.issues }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Install TFLint
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
        
    - name: Run Terraform linting
      id: terraform-check
      continue-on-error: true  # Never fail the pipeline on linting issues
      run: |
        echo "🔍 Running Terraform linting..."
        
        ISSUES_FILE="/tmp/terraform_issues.txt"
        TOTAL_ISSUES=0
        
        # Find Terraform files
        TF_FILES=$(find . -name "*.tf" -not -path "./.git/*")
        
        if [ -z "$TF_FILES" ]; then
          echo "ℹ️  No Terraform files found to lint"
          echo "issues=0" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "Found Terraform files to check:"
        echo "$TF_FILES"
        
        # Run terraform fmt check
        echo -e "\n📋 Running terraform fmt check..." | tee -a "$ISSUES_FILE"
        if ! terraform fmt -check -recursive . > /tmp/tf_fmt.out 2>&1; then
          FMT_ISSUES=$(wc -l < /tmp/tf_fmt.out || echo "0")
          echo "⚠️  Found $FMT_ISSUES formatting issues:" | tee -a "$ISSUES_FILE"
          cat /tmp/tf_fmt.out | tee -a "$ISSUES_FILE"
          TOTAL_ISSUES=$((TOTAL_ISSUES + FMT_ISSUES))
        else
          echo "✅ No Terraform formatting issues found" | tee -a "$ISSUES_FILE"
        fi
        
        # Run terraform validate on directories with .tf files
        echo -e "\n🔍 Running terraform validate..." | tee -a "$ISSUES_FILE"
        find . -name "*.tf" -not -path "./.git/*" -exec dirname {} \; | sort -u | while read -r dir; do
          echo "Validating directory: $dir"
          cd "$dir" || continue
          if ! terraform init -backend=false >/dev/null 2>&1; then
            echo "⚠️  Could not initialize $dir for validation" | tee -a "$ISSUES_FILE"
            continue
          fi
          if ! terraform validate > /tmp/tf_validate.out 2>&1; then
            VALIDATE_ISSUES=$(grep -c "Error:" /tmp/tf_validate.out || echo "0")
            echo "⚠️  Found $VALIDATE_ISSUES validation issues in $dir:" | tee -a "$ISSUES_FILE"
            cat /tmp/tf_validate.out | tee -a "$ISSUES_FILE"
            TOTAL_ISSUES=$((TOTAL_ISSUES + VALIDATE_ISSUES))
          fi
          cd - >/dev/null || exit
        done
        
        echo "issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        if [ "$TOTAL_ISSUES" -gt 0 ]; then
          echo "⚠️  Total Terraform issues found: $TOTAL_ISSUES"
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            echo "::warning title=Terraform Linting Issues::Found $TOTAL_ISSUES Terraform formatting/validation issues. See job logs for details."
          fi
        else
          echo "✅ No Terraform linting issues found"
        fi
        
    - name: Upload Terraform lint results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: terraform-lint-results
        path: /tmp/terraform_issues.txt
        retention-days: 7

  linting-summary:
    name: Linting Summary
    runs-on: ubuntu-latest
    needs: [yaml-lint, json-lint, python-lint, javascript-lint, dockerfile-lint, terraform-lint]
    if: always()
    outputs:
      status: ${{ steps.summary.outputs.status }}
      issues_found: ${{ steps.summary.outputs.total_issues }}
      
    steps:
    - name: Generate linting summary
      id: summary
      run: |
        YAML_ISSUES="${{ needs.yaml-lint.outputs.yaml_issues || '0' }}"
        JSON_ISSUES="${{ needs.json-lint.outputs.json_issues || '0' }}"
        PYTHON_ISSUES="${{ needs.python-lint.outputs.python_issues || '0' }}"
        JS_ISSUES="${{ needs.javascript-lint.outputs.js_issues || '0' }}"
        DOCKER_ISSUES="${{ needs.dockerfile-lint.outputs.docker_issues || '0' }}"
        TERRAFORM_ISSUES="${{ needs.terraform-lint.outputs.terraform_issues || '0' }}"
        
        TOTAL_ISSUES=$((YAML_ISSUES + JSON_ISSUES + PYTHON_ISSUES + JS_ISSUES + DOCKER_ISSUES + TERRAFORM_ISSUES))
        
        echo "total_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
        
        echo "📊 Linting Summary:"
        echo "==================="
        echo "YAML Issues: $YAML_ISSUES"
        echo "JSON Issues: $JSON_ISSUES"
        echo "Python Issues: $PYTHON_ISSUES"
        echo "JavaScript Issues: $JS_ISSUES"
        echo "Dockerfile Issues: $DOCKER_ISSUES"
        echo "Terraform Issues: $TERRAFORM_ISSUES"
        echo "==================="
        echo "Total Issues: $TOTAL_ISSUES"
        
        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "✅ All linting checks passed!"
        else
          echo "status=warning" >> $GITHUB_OUTPUT
          echo "⚠️  Linting found $TOTAL_ISSUES issues across all file types"
          echo "::warning title=Linting Summary::Found $TOTAL_ISSUES total linting issues. Pipeline will continue but issues should be addressed."
        fi
        
    - name: Download all lint results
      if: always()
      uses: actions/download-artifact@v3
      continue-on-error: true
      
    - name: Create combined lint report
      if: always()
      run: |
        echo "# Code Quality and Linting Report" > lint_report.md
        echo "" >> lint_report.md
        echo "Generated on: $(date)" >> lint_report.md
        echo "" >> lint_report.md
        
        TOTAL_ISSUES="${{ steps.summary.outputs.total_issues }}"
        
        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "## ✅ All linting checks passed!" >> lint_report.md
        else
          echo "## ⚠️ Issues Found: $TOTAL_ISSUES" >> lint_report.md
          echo "" >> lint_report.md
          echo "The following linting issues were detected:" >> lint_report.md
          echo "" >> lint_report.md
          
          # Add details from each linter if files exist
          for lint_type in yaml json python js dockerfile terraform; do
            if [ -f "${lint_type}-lint-results/${lint_type}_issues.txt" ]; then
              echo "### ${lint_type^} Issues" >> lint_report.md
              echo '```' >> lint_report.md
              cat "${lint_type}-lint-results/${lint_type}_issues.txt" >> lint_report.md
              echo '```' >> lint_report.md
              echo "" >> lint_report.md
            fi
          done
        fi
        
    - name: Upload combined lint report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: combined-lint-report
        path: lint_report.md
        retention-days: 30