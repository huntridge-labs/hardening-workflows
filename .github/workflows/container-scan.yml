name: Container Security Scanning

on:
  # Remove direct PR triggers since this workflow is called by security-hardening.yml
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - '**/Dockerfile*'
  #     - '.github/workflows/container-scan.yml'
  # pull_request:
  #   branches: [ main, develop ]
  #   paths:
  #     - '**/Dockerfile*'
  #     - '.github/workflows/container-scan.yml'
  workflow_dispatch:  # Keep for manual testing
  workflow_call:      # Keep for reusable workflow calls from security-hardening.yml
    inputs:
      post_pr_comment:
        description: 'Whether to post PR comments (disabled when called from other workflows)'
        required: false
        type: boolean
        default: true
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Discover containers in this repository
  discover-containers:
    name: Discover Container Images
    runs-on: ubuntu-latest
    outputs:
      containers: ${{ steps.discover.outputs.containers }}
      has_containers: ${{ steps.discover.outputs.has_containers }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Discover Dockerfiles in repository
      id: discover
      run: |
        echo "üîç Discovering Dockerfiles in repository..."

        # Find all Dockerfiles in the repository
        DOCKERFILES=$(find . -name "Dockerfile*" -not -path "./.git/*" -type f)

        if [ -z "$DOCKERFILES" ]; then
          echo "‚ÑπÔ∏è  No Dockerfiles found in repository"
          echo "has_containers=false" >> $GITHUB_OUTPUT
          echo "containers=[]" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "Found Dockerfiles:"
        echo "$DOCKERFILES"

        # Create JSON array of containers to scan
        containers="["
        first=true

        for dockerfile in $DOCKERFILES; do
          # Extract directory and create container info
          dir=$(dirname "$dockerfile")
          name=$(basename "$dir")

          # Handle special cases for naming
          if [[ "$dockerfile" == *"vulnerable"* ]]; then
            name="${name}-vulnerable"
          elif [[ "$dockerfile" == *"secure"* ]]; then
            name="${name}-secure"
          fi

          if [ "$first" = true ]; then
            first=false
          else
            containers="$containers,"
          fi

          containers="$containers{\"dockerfile\":\"$dockerfile\",\"name\":\"$name\",\"context\":\"$dir\"}"
        done

        containers="$containers]"

        echo "has_containers=true" >> $GITHUB_OUTPUT
        echo "containers=$containers" >> $GITHUB_OUTPUT

        echo "Container scan matrix:"
        echo "$containers" | jq '.'

  build-and-scan:
    name: Build and Scan Container Images
    runs-on: ubuntu-latest
    needs: discover-containers
    if: needs.discover-containers.outputs.has_containers == 'true'
    timeout-minutes: 30
    continue-on-error: true  # Allow pipeline to continue even if vulnerabilities found

    strategy:
      fail-fast: false
      matrix:
        container: ${{ fromJson(needs.discover-containers.outputs.containers) }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build container image
      id: build
      continue-on-error: true  # Don't fail if build has issues
      run: |
        # Generate image name and tag
        IMAGE_NAME="hardening-test-$(echo '${{ matrix.container.name }}' | tr '/' '-' | tr '[:upper:]' '[:lower:]')"
        IMAGE_TAG="scan-$(echo $GITHUB_SHA | cut -c1-8)"
        FULL_IMAGE="${IMAGE_NAME}:${IMAGE_TAG}"

        echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "full_image=$FULL_IMAGE" >> $GITHUB_OUTPUT

        echo "üî® Building image: $FULL_IMAGE"
        echo "üìÑ Dockerfile: ${{ matrix.container.dockerfile }}"
        echo "üìÅ Context: ${{ matrix.container.context }}"

        # Build the image
        if docker build \
          --tag "$FULL_IMAGE" \
          --file "${{ matrix.container.dockerfile }}" \
          "${{ matrix.container.context }}"; then
          echo "‚úÖ Successfully built image: $FULL_IMAGE"
          echo "build_success=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to build image: $FULL_IMAGE"
          echo "build_success=false" >> $GITHUB_OUTPUT
          echo "::warning title=Build Failed::Failed to build ${{ matrix.container.name }} - this may be expected for vulnerable test containers"
        fi

    - name: Generate SBOM for built image (Syft)
      if: steps.build.outputs.build_success == 'true'
      uses: anchore/sbom-action@v0.16.0
      with:
        image: ${{ steps.build.outputs.full_image }}
        format: cyclonedx-json
        output-file: container-scan-results-sbom-${{ matrix.container.name }}.json

    - name: Upload SBOM Artifact
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: container-scan-results-sbom-${{ matrix.container.name }}
        path: container-scan-results-sbom-${{ matrix.container.name }}.json

    - name: Generate human-readable SBOM (table)
      if: steps.build.outputs.build_success == 'true'
      run: |
        syft ${{ steps.build.outputs.full_image }} -o table > container-scan-results-sbom-${{ matrix.container.name }}.txt

    - name: Upload human-readable SBOM Artifact
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: container-scan-results-sbom-table-${{ matrix.container.name }}
        path: container-scan-results-sbom-${{ matrix.container.name }}.txt

    - name: SBOM summary
      if: steps.build.outputs.build_success == 'true'
      run: echo "‚úÖ SBOM generated for ${{ steps.build.outputs.full_image }} ‚Üí container-scan-results-sbom-${{ matrix.container.name }}.json" >> $GITHUB_STEP_SUMMARY

    - name: Run Trivy vulnerability scanner (SARIF)
      if: steps.build.outputs.build_success == 'true'
      uses: aquasecurity/trivy-action@master
      continue-on-error: true  # Never fail the pipeline
      with:
        image-ref: ${{ steps.build.outputs.full_image }}
        format: 'sarif'
        output: 'trivy-${{ matrix.container.name }}-results.sarif'

    - name: Run Trivy vulnerability scanner (JSON)
      if: steps.build.outputs.build_success == 'true'
      uses: aquasecurity/trivy-action@master
      continue-on-error: true  # Never fail the pipeline
      with:
        image-ref: ${{ steps.build.outputs.full_image }}
        format: 'json'
        output: 'trivy-${{ matrix.container.name }}-results.json'

    - name: Run Trivy vulnerability scanner (Table)
      if: steps.build.outputs.build_success == 'true'
      uses: aquasecurity/trivy-action@master
      continue-on-error: true  # Never fail the pipeline
      with:
        image-ref: ${{ steps.build.outputs.full_image }}
        format: 'table'
        output: 'trivy-${{ matrix.container.name }}-results.txt'

    - name: Upload Trivy scan results to GitHub Security tab
      if: inputs.enable_code_security == true && steps.build.outputs.build_success == 'true' && github.actor != 'nektos/act' && hashFiles('trivy-${{ matrix.container.name }}-results.sarif') != ''
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # Never fail the pipeline
      with:
        sarif_file: 'trivy-${{ matrix.container.name }}-results.sarif'

    - name: Run Grype vulnerability scanner
      if: steps.build.outputs.build_success == 'true'
      uses: anchore/scan-action@v7
      id: grype-scan
      continue-on-error: true  # Never fail the pipeline
      with:
        image: ${{ steps.build.outputs.full_image }}
        fail-build: false
        output-format: sarif

    - name: Upload Grype scan results
      if: inputs.enable_code_security == true && steps.build.outputs.build_success == 'true' && github.actor != 'nektos/act' && steps.grype-scan.outputs.sarif != ''
      uses: github/codeql-action/upload-sarif@v3
      continue-on-error: true  # Never fail the pipeline
      with:
        sarif_file: ${{ steps.grype-scan.outputs.sarif }}

    - name: Analyze scan results
      if: always()
      run: |
        echo "üìä Container Security Analysis for ${{ matrix.container.name }}"
        echo "=========================================="

        if [ "${{ steps.build.outputs.build_success }}" != "true" ]; then
          echo "‚ö†Ô∏è  Container build failed - skipping security analysis"
          echo "This may be expected for intentionally vulnerable test containers"
          exit 0
        fi

        # Count vulnerabilities from Trivy JSON if available
        if [ -f "trivy-${{ matrix.container.name }}-results.json" ]; then
          CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-${{ matrix.container.name }}-results.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-${{ matrix.container.name }}-results.json 2>/dev/null || echo "0")
          MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-${{ matrix.container.name }}-results.json 2>/dev/null || echo "0")
          LOW=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' trivy-${{ matrix.container.name }}-results.json 2>/dev/null || echo "0")

          echo "üîç Vulnerability Summary:"
          echo "  Critical: $CRITICAL"
          echo "  High: $HIGH"
          echo "  Medium: $MEDIUM"
          echo "  Low: $LOW"

          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))

          if [ "$TOTAL" -gt 0 ]; then
            echo "‚ö†Ô∏è  Found $TOTAL total vulnerabilities"
            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "::warning title=High Severity Vulnerabilities::Found $CRITICAL critical and $HIGH high severity vulnerabilities in ${{ matrix.container.name }}"
            fi
          else
            echo "‚úÖ No vulnerabilities found"
          fi
        fi

        # Display sample of results if available
        if [ -f "trivy-${{ matrix.container.name }}-results.txt" ]; then
          echo ""
          echo "üìã Sample Trivy Results:"
          head -20 "trivy-${{ matrix.container.name }}-results.txt" || echo "Could not display results"
        fi

    - name: Create container scan summary
      if: always()
      run: |
        echo "# Container Scan Summary - ${{ matrix.container.name }}" > container-summary-${{ matrix.container.name }}.md
        echo "" >> container-summary-${{ matrix.container.name }}.md
        echo "**Dockerfile:** ${{ matrix.container.dockerfile }}" >> container-summary-${{ matrix.container.name }}.md
        echo "**Context:** ${{ matrix.container.context }}" >> container-summary-${{ matrix.container.name }}.md
        echo "**Build Status:** ${{ steps.build.outputs.build_success == 'true' && 'Success' || 'Failed' }}" >> container-summary-${{ matrix.container.name }}.md

        if [ "${{ steps.build.outputs.build_success }}" == "true" ]; then
          echo "**Image:** ${{ steps.build.outputs.full_image }}" >> container-summary-${{ matrix.container.name }}.md
        fi

        echo "" >> container-summary-${{ matrix.container.name }}.md

        if [ "${{ steps.build.outputs.build_success }}" == "true" ] && [ -f "trivy-${{ matrix.container.name }}-results.txt" ]; then
          echo "## Security Scan Results" >> container-summary-${{ matrix.container.name }}.md
          echo "\`\`\`" >> container-summary-${{ matrix.container.name }}.md
          head -50 "trivy-${{ matrix.container.name }}-results.txt" >> container-summary-${{ matrix.container.name }}.md
          echo "\`\`\`" >> container-summary-${{ matrix.container.name }}.md
        elif [ "${{ steps.build.outputs.build_success }}" != "true" ]; then
          echo "## Build Failed" >> container-summary-${{ matrix.container.name }}.md
          echo "Container build failed. This may be expected for intentionally vulnerable test containers." >> container-summary-${{ matrix.container.name }}.md
        else
          echo "## No Scan Results" >> container-summary-${{ matrix.container.name }}.md
          echo "No security scan results available." >> container-summary-${{ matrix.container.name }}.md
        fi

        echo "" >> container-summary-${{ matrix.container.name }}.md
        echo "**Scan completed:** $(date)" >> container-summary-${{ matrix.container.name }}.md

    - name: Archive vulnerability scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: container-scan-results-${{ matrix.container.name }}
        path: |
          trivy-${{ matrix.container.name }}-results.*
          container-summary-${{ matrix.container.name }}.md
        retention-days: 30

  container-scan-summary:
    name: Container Scan Summary
    runs-on: ubuntu-latest
    needs: [discover-containers, build-and-scan]
    if: always()

    steps:
    - name: Download all scan artifacts
      if: needs.discover-containers.outputs.has_containers == 'true'
      uses: actions/download-artifact@v5
      continue-on-error: true

    - name: Create comprehensive container security report
      run: |
        echo "# Container Security Scan Summary" > container-security-report.md
        echo "" >> container-security-report.md

        if [ "${{ needs.discover-containers.outputs.has_containers }}" != "true" ]; then
          echo "## No Containers Found" >> container-security-report.md
          echo "" >> container-security-report.md
          echo "No Dockerfiles were found in this repository to scan." >> container-security-report.md
          echo "" >> container-security-report.md
          echo "To add container scanning:" >> container-security-report.md
          echo "1. Add Dockerfiles to your repository" >> container-security-report.md
          echo "2. Push changes to trigger container scanning" >> container-security-report.md
        else
          echo "## Vulnerability Counts by Severity" >> container-security-report.md
          echo "" >> container-security-report.md

          # Enhanced table with vulnerability counts by severity per container
          echo "| Container | Critical | High | Medium | Low | Total | Build Status |" >> container-security-report.md
          echo "|-----------|----------|------|--------|-----|-------|--------------|" >> container-security-report.md

          # Install jq if not available
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Initialize totals
          total_crit=0
          total_high=0
          total_med=0
          total_low=0
          total_all=0
          scanned_containers=0
          failed_builds=0

          # Function to parse Trivy JSON results
          parse_trivy() {
            local file="$1"
            if [ -f "$file" ] && [ -s "$file" ]; then
              local crit=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$file" 2>/dev/null || echo 0)
              local high=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' "$file" 2>/dev/null || echo 0)
              local med=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' "$file" 2>/dev/null || echo 0)
              local low=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "LOW")] | length' "$file" 2>/dev/null || echo 0)
              echo "$crit $high $med $low"
            else
              echo "0 0 0 0"
            fi
          }

          # Parse results for each container
          if ls container-scan-results-* 1> /dev/null 2>&1; then
            for container_dir in container-scan-results-*; do
              if [ -d "$container_dir" ]; then
                container_name=$(echo "$container_dir" | sed 's/container-scan-results-//')
                trivy_json="$container_dir/trivy-${container_name}-results.json"

                # Check if container built successfully by looking for results
                if [ -f "$trivy_json" ]; then
                  counts=$(parse_trivy "$trivy_json")
                  read crit high med low <<< "$counts"
                  container_total=$((crit + high + med + low))

                  echo "| $container_name | $crit | $high | $med | $low | $container_total | ‚úÖ Success |" >> container-security-report.md

                  # Add to totals
                  total_crit=$((total_crit + crit))
                  total_high=$((total_high + high))
                  total_med=$((total_med + med))
                  total_low=$((total_low + low))
                  scanned_containers=$((scanned_containers + 1))
                else
                  echo "| $container_name | - | - | - | - | - | ‚ùå Build Failed |" >> container-security-report.md
                  failed_builds=$((failed_builds + 1))
                fi
              fi
            done
          fi

          total_all=$((total_crit + total_high + total_med + total_low))

          echo "| **TOTAL** | **$total_crit** | **$total_high** | **$total_med** | **$total_low** | **$total_all** | - |" >> container-security-report.md
          echo "" >> container-security-report.md

          # Add scan overview
          echo "## Scan Overview" >> container-security-report.md
          echo "" >> container-security-report.md
          echo "| Metric | Count |" >> container-security-report.md
          echo "|--------|-------|" >> container-security-report.md
          echo "| Containers Scanned | $scanned_containers |" >> container-security-report.md
          echo "| Build Failures | $failed_builds |" >> container-security-report.md
          echo "| Total Vulnerabilities | $total_all |" >> container-security-report.md
          echo "| Discovery Status | ${{ needs.discover-containers.result }} |" >> container-security-report.md
          echo "| Scanning Status | ${{ needs.build-and-scan.result }} |" >> container-security-report.md
          echo "" >> container-security-report.md

          # Add priority recommendations based on actual vulnerability counts
          if [ $total_crit -gt 0 ]; then
            echo "## üö® CRITICAL PRIORITY" >> container-security-report.md
            echo "" >> container-security-report.md
            echo "**$total_crit critical vulnerabilities found!** These require immediate attention." >> container-security-report.md
            echo "" >> container-security-report.md
          fi

          if [ $total_high -gt 0 ]; then
            echo "## ‚ö†Ô∏è HIGH PRIORITY" >> container-security-report.md
            echo "" >> container-security_report.md
            echo "**$total_high high-severity vulnerabilities found.** Address these as soon as possible." >> container-security-report.md
            echo "" >> container-security-report.md
          fi

          if [ $total_all -eq 0 ] && [ $scanned_containers -gt 0 ]; then
            echo "## ‚úÖ NO VULNERABILITIES DETECTED" >> container-security-report.md
            echo "" >> container-security-report.md
            echo "Great work! No security vulnerabilities were detected in the scanned containers." >> container-security-report.md
            echo "" >> container-security-report.md
          fi

          # Build failure notes
          if [ $failed_builds -gt 0 ]; then
            echo "## ‚ö†Ô∏è BUILD FAILURES" >> container-security-report.md
            echo "" >> container-security-report.md
            echo "**$failed_builds container(s) failed to build.** This may be expected for intentionally vulnerable test containers." >> container-security-report.md
            echo "" >> container-security-report.md
          fi

          echo "## Container Details" >> container-security-report.md
          echo "" >> container-security-report.md

          # Include individual container summaries with enhanced details
          if ls container-scan-results-*/container-summary-*.md 1> /dev/null 2>&1; then
            for summary in container-scan-results-*/container-summary-*.md; do
              if [ -f "$summary" ]; then
                container_name=$(basename "$summary" .md | sed 's/container-summary-//')
                echo "### üê≥ $container_name" >> container-security-report.md

                # Add vulnerability breakdown for this container
                trivy_json="container-scan-results-${container_name}/trivy-${container_name}-results.json"
                if [ -f "$trivy_json" ]; then
                  counts=$(parse_trivy "$trivy_json")
                  read crit high med low <<< "$counts"
                  container_total=$((crit + high + med + low))

                  echo "" >> container-security-report.md
                  echo "**Vulnerability Summary:** $container_total total ($crit critical, $high high, $med medium, $low low)" >> container-security-report.md
                  echo "" >> container-security-report.md
                fi

                cat "$summary" >> container-security-report.md
                echo "" >> container-security-report.md
              fi
            done
          else
            echo "No detailed container summaries available." >> container-security-report.md
          fi
        fi

        echo "## Security Reports Location" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "üîç **Container scan results are available in the following locations:**" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "1. **Workflow Artifacts** - Download detailed reports from the Actions tab" >> container-security-report.md
        echo "2. **GitHub Security Tab** - If GitHub Advanced Security is enabled" >> container-security-report.md
        echo "3. **SARIF Files** - Available as artifacts for integration with other tools" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "üìã **Available Report Formats:**" >> container-security-report.md
        echo "- SARIF (for security tools integration)" >> container-security-report.md
        echo "- JSON (for programmatic analysis)" >> container-security-report.md
        echo "- Text (for human-readable output)" >> container-security-report.md
        echo "" >> container-security-report.md

        echo "## Security Testing Notes" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "This repository contains both secure and vulnerable container examples for testing:" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "- **Secure containers** should show minimal vulnerabilities" >> container-security_report.md
        echo "- **Vulnerable containers** are intentionally insecure for testing detection capabilities" >> container-security_report.md
        echo "- **Build failures** on vulnerable containers may be expected due to intentional issues" >> container-security_report.md
        echo "" >> container-security-report.md

        echo "## Recommendations" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "1. **Download artifacts** to review detailed vulnerability findings" >> container-security-report.md
        echo "2. **Address high and critical severity vulnerabilities** first" >> container-security-report.md
        echo "3. **Update base images and dependencies** with known vulnerabilities" >> container-security-report.md
        echo "4. **Use minimal base images** (Alpine, distroless) to reduce attack surface" >> container-security_report.md
        echo "5. **Implement multi-stage builds** to minimize final image size" >> container-security_report.md
        echo "6. **Run containers as non-root users** when possible" >> container-security_report.md
        echo "7. **Consider enabling GitHub Advanced Security** for integrated security dashboard" >> container-security_report.md
        echo "" >> container-security-report.md

        echo "## GitHub Advanced Security" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "‚ÑπÔ∏è  **Note:** Some SARIF uploads may show warnings if GitHub Advanced Security is not enabled." >> container-security-report.md
        echo "This doesn't affect the container scanning - all results are still available as downloadable artifacts." >> container-security-report.md
        echo "" >> container-security-report.md
        echo "To enable Code Security features:" >> container-security-report.md
        echo "1. Go to repository Settings > Security & Analysis" >> container-security-report.md
        echo "2. Enable 'Private vulnerability reporting'" >> container-security-report.md
        echo "3. Enable 'Dependency review' (requires GitHub Advanced Security)" >> container-security-report.md
        echo "4. Enable 'Code scanning' (requires GitHub Advanced Security)" >> container-security-report.md
        echo "" >> container-security-report.md
        echo "Generated on: $(date)" >> container-security-report.md

    - name: Upload container security report
      uses: actions/upload-artifact@v4
      with:
        name: container-security-summary
        path: container-security-report.md
        retention-days: 30

    - name: Generate Container summary section
      if: always()
      run: |
        mkdir -p scanner-summaries

        echo "<details>" > scanner-summaries/container.md
        echo "<summary>üîç Container Security</summary>" >> scanner-summaries/container.md
        echo "" >> scanner-summaries/container.md

        # Check if we have container scan results
        if compgen -G "container-scan-results-*" > /dev/null 2>&1 || compgen -G "trivy-*-results.sarif" > /dev/null 2>&1; then
          echo "**Status:** ‚úÖ Completed" >> scanner-summaries/container.md
          echo "" >> scanner-summaries/container.md

          # Count vulnerabilities from SARIF files
          VULN_COUNT=0
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0

          for sarif_file in $(find . -name "trivy-*-results.sarif" -type f 2>/dev/null); do
            if [ -f "$sarif_file" ] && [ -s "$sarif_file" ] && command -v jq >/dev/null 2>&1; then
              vulns=$(jq -r '.runs[]?.results[]? | .ruleId' "$sarif_file" 2>/dev/null | wc -l | tr -d ' ')
              VULN_COUNT=$((VULN_COUNT + vulns))

              critical=$(jq -r '.runs[]?.results[]? | select(.level == "error") | .ruleId' "$sarif_file" 2>/dev/null | wc -l | tr -d ' ')
              CRITICAL_COUNT=$((CRITICAL_COUNT + critical))

              high=$(jq -r '.runs[]?.results[]? | select(.level == "warning") | .ruleId' "$sarif_file" 2>/dev/null | wc -l | tr -d ' ')
              HIGH_COUNT=$((HIGH_COUNT + high))

              medium=$(jq -r '.runs[]?.results[]? | select(.level == "note") | .ruleId' "$sarif_file" 2>/dev/null | wc -l | tr -d ' ')
              MEDIUM_COUNT=$((MEDIUM_COUNT + medium))

              low=$(jq -r '.runs[]?.results[]? | select(.level == "info") | .ruleId' "$sarif_file" 2>/dev/null | wc -l | tr -d ' ')
              LOW_COUNT=$((LOW_COUNT + low))
            fi
          done

          echo "**Vulnerabilities Found:** $VULN_COUNT" >> scanner-summaries/container.md
          echo "" >> scanner-summaries/container.md

          if [ $VULN_COUNT -gt 0 ]; then
            echo "| Severity | Count |" >> scanner-summaries/container.md
            echo "|----------|-------|" >> scanner-summaries/container.md
            [ $CRITICAL_COUNT -gt 0 ] && echo "| üî¥ Critical | $CRITICAL_COUNT |" >> scanner-summaries/container.md
            [ $HIGH_COUNT -gt 0 ] && echo "| üü† High | $HIGH_COUNT |" >> scanner-summaries/container.md
            [ $MEDIUM_COUNT -gt 0 ] && echo "| üü° Medium | $MEDIUM_COUNT |" >> scanner-summaries/container.md
            [ $LOW_COUNT -gt 0 ] && echo "| üîµ Low | $LOW_COUNT |" >> scanner-summaries/container.md
            echo "" >> scanner-summaries/container.md
          fi

          echo "**üìÅ Artifacts:** [Container Scan Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> scanner-summaries/container.md
        else
          echo "**Status:** ‚è≠Ô∏è Skipped" >> scanner-summaries/container.md
        fi

        echo "" >> scanner-summaries/container.md
        echo "</details>" >> scanner-summaries/container.md
        echo "" >> scanner-summaries/container.md
      continue-on-error: true

    - name: Upload Container summary section
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scanner-summary-container
        path: scanner-summaries/container.md
        retention-days: 7
      continue-on-error: true

    - name: Comment PR with enhanced container security results
      if: false  # Disabled - consolidated into main security hardening comment
      uses: actions/github-script@v8
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');

          // Import the enhanced comment generator
          const enhancerPath = path.join(process.cwd(), '.github', 'scripts', 'enhance-pr-comments.js');
          let enhancer;

          try {
            enhancer = require(enhancerPath);
          } catch (error) {
            console.log('‚ö†Ô∏è Enhanced comment generator not found, falling back to basic comments');
            enhancer = null;
          }

          // Check if we have the necessary permissions and context
          console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
          console.log('Event name:', context.eventName);
          console.log('Actor:', context.actor);
          console.log('PR number:', context.issue?.number);
          console.log('Is from fork:', context.payload.pull_request?.head?.repo?.fork || false);

          // Check if running from a fork
          const isFromFork = context.payload.pull_request?.head?.repo?.fork || false;
          if (isFromFork) {
            console.log('‚ö†Ô∏è  Running from a fork - PR commenting may be restricted');
          }

          try {
            const report = fs.readFileSync('container-security-report.md', 'utf8');
            let commentBody;

            if (enhancer) {
              // Use enhanced comment generator
              console.log('üìù Generating enhanced PR comment...');
              const containerData = enhancer.parseContainerReport(report);
              const runId = context.runId;
              const repoOwner = context.repo.owner;
              const repoName = context.repo.repo;

              commentBody = enhancer.generateEnhancedContainerComment(containerData, runId, repoOwner, repoName);
            } else {
              // Fallback to basic comment
              const truncatedReport = report.length > 65000 ?
                report.substring(0, 65000) + '\n\n... (report truncated, see artifacts for full report)' :
                report;
              commentBody = `## üê≥ Container Security Analysis Results\n\n${truncatedReport}`;
            }

            // Check for existing container security comments to update instead of creating new ones
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.data.find(comment =>
              (comment.body.includes('üê≥ Container Security Analysis') ||
               comment.body.includes('üê≥ Container Security')) &&
              comment.user.type === 'Bot'
            );

            if (existingComment) {
              // Update existing comment with latest information
              console.log('üîÑ Updating existing container security comment');
              const timestamp = new Date().toLocaleString();
              const commitSha = context.sha.substring(0, 8);
              const updatedBody = commentBody + `\n\n---\n*Last updated: ${timestamp} | Commit: ${commitSha} | [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updatedBody
              });
            } else {
              // Create new comment
              console.log('üìù Creating new container security comment');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

            console.log('‚úÖ Successfully posted/updated container security summary comment');
            core.setOutput('comment_posted', 'true');
          } catch (error) {
            console.log('‚ùå Failed to post container security comment:', error.message);
            console.log('Error status:', error.status);

            if (error.status === 403) {
              console.log('üîí Permission denied - this can happen when:');
              console.log('   ‚Ä¢ Running on a fork (security restriction)');
              console.log('   ‚Ä¢ Missing pull-requests: write permission');
              console.log('   ‚Ä¢ Repository settings restrict PR comments');
            } else if (error.status === 404) {
              console.log('üîç Resource not found - check if PR exists');
            }

            console.log('üìã Container security report is still available in workflow artifacts');

            // Set step output to indicate comment failed
            core.setOutput('comment_posted', 'false');
            core.setOutput('comment_error', error.message);
          }
