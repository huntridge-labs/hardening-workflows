name: CodeQL Scanner

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      codeql_languages:
        description: 'Comma-separated list of languages for CodeQL analysis (e.g., "python,javascript" or "python")'
        required: false
        type: string
        default: 'python,javascript'
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        type: boolean
        default: true

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  generate-codeql-matrix:
    name: Generate CodeQL Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Generate matrix
      id: set-matrix
      run: |
        # Parse the codeql_languages input (comma-separated)
        LANGUAGES="${{ inputs.codeql_languages }}"
        if [ -z "$LANGUAGES" ]; then
          LANGUAGES="python,javascript"
        fi

        echo "Input languages: $LANGUAGES"

        # Validate languages and remove spaces
        LANGUAGES=$(echo "$LANGUAGES" | tr -d ' ')

        # Convert comma-separated string to JSON array
        MATRIX_JSON=$(echo "$LANGUAGES" | sed 's/,/","/g' | sed 's/^/["/' | sed 's/$/"]/')
        echo "Generated matrix: $MATRIX_JSON"

        # Validate JSON syntax
        if ! echo "$MATRIX_JSON" | python3 -m json.tool > /dev/null 2>&1; then
          echo "Error: Invalid JSON generated: $MATRIX_JSON"
          echo "Falling back to default languages"
          MATRIX_JSON='["python","javascript"]'
        fi

        echo "matrix={\"language\":$MATRIX_JSON}" >> $GITHUB_OUTPUT

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: generate-codeql-matrix
    timeout-minutes: 45
    continue-on-error: true
    if: github.actor != 'nektos/act'
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-codeql-matrix.outputs.matrix) }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Debug - Show files to analyze
      run: |
        echo "üîç Files that will be analyzed for ${{ matrix.language }}:"
        if [ "${{ matrix.language }}" = "javascript" ]; then
          find . -name "*.js" -o -name "*.ts" | head -20
        elif [ "${{ matrix.language }}" = "python" ]; then
          find . -name "*.py" | head -20
        fi

    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v5
      with:
        node-version: '22'

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        fi
      continue-on-error: true

    - name: Install Node.js dependencies
      if: matrix.language == 'javascript'
      run: |
        # Find all package.json files and install dependencies
        find . -name "package.json" -not -path "*/node_modules/*" | while read package; do
          dir=$(dirname "$package")
          echo "Installing dependencies in $dir"
          cd "$dir"
          npm install || true
          cd - > /dev/null
        done
      continue-on-error: true

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
      continue-on-error: true

  codeql-summary:
    name: CodeQL Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis]
    if: always()

    steps:
    - name: Create CodeQL Summary
      run: |
        echo "# üîç CodeQL Security Analysis Summary" > codeql-summary.md
        echo "" >> codeql-summary.md
        echo "**Status:** ${{ needs.codeql-analysis.result }}" >> codeql-summary.md
        echo "" >> codeql-summary.md
        echo "CodeQL analysis completed. Check the Security tab for detailed results." >> codeql-summary.md
        echo "" >> codeql-summary.md
        echo "**Note:** Results are uploaded to GitHub Code Scanning and will appear in the Security tab." >> codeql-summary.md

    - name: Upload CodeQL Summary
      uses: actions/upload-artifact@v4
      with:
        name: codeql-summary
        path: codeql-summary.md
        retention-days: 30

    - name: Comment PR with CodeQL Results
      if: github.event_name == 'pull_request' && (inputs.post_pr_comment == true || inputs.post_pr_comment == null)
      uses: actions/github-script@v8
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');

          console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
          console.log('Event name:', context.eventName);
          console.log('PR number:', context.issue?.number);

          try {
            const summary = fs.readFileSync('codeql-summary.md', 'utf8');
            const commentBody = `## üîç CodeQL Analysis Results\n\n<!-- codeql-comment-marker -->\n\n${summary}`;

            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const existingComment = comments.data.find(comment => {
              const hasMarker = comment.body.includes('codeql-comment-marker');
              const isGitHubActions = comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot';
              return hasMarker && isGitHubActions;
            });

            if (existingComment) {
              console.log('üîÑ Updating existing CodeQL comment');
              const timestamp = new Date().toLocaleString();
              const commitSha = context.sha.substring(0, 8);
              const updatedBody = commentBody + `\n\n---\n*Last updated: ${timestamp} | Commit: ${commitSha} | [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updatedBody
              });
            } else {
              console.log('üìù Creating new CodeQL comment');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

            console.log('‚úÖ Successfully posted/updated CodeQL summary comment');
          } catch (error) {
            console.log('‚ùå Failed to post CodeQL comment:', error.message);
            console.log('üìã CodeQL report is still available in workflow artifacts');
          }
