name: Security Hardening Pipeline

on:
  push:
    branches: [ main ]
  # Disabled pull_request trigger - use pr-verification.yml for PR checks instead
  # pull_request:
  #   branches: [ main ]
  # Reduced schedule frequency to reduce noise - now monthly instead of weekly
  schedule:
    # Run comprehensive security checks monthly on the first Sunday at 1 AM UTC
    - cron: '0 1 1 * 0'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - sast-only
          - container-only
          - infrastructure-only

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  checks: write
  id-token: write  # Required for AWS OIDC authentication

env:
  AWS_ACCOUNT_ID: 701186259805
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.12'

jobs:
  # Note: Linting is intentionally NOT included in this workflow
  # Add a separate linting job in your workflow if code quality checks are needed
  # See example-granular-workflow.yml for how to structure this

  scan-coordinator:
    name: Scan Coordinator
    runs-on: ubuntu-latest
    outputs:
      scan_type: ${{ steps.determine-scan.outputs.scan_type }}
      should_run_sast: ${{ steps.determine-scan.outputs.should_run_sast }}
      should_run_container: ${{ steps.determine-scan.outputs.should_run_container }}
      should_run_infrastructure: ${{ steps.determine-scan.outputs.should_run_infrastructure }}

    steps:
    - name: Determine scan type
      id: determine-scan
      run: |
        SCAN_TYPE="${{ github.event.inputs.scan_type }}"
        if [ -z "$SCAN_TYPE" ]; then
          SCAN_TYPE="full"
        fi

        echo "scan_type=$SCAN_TYPE" >> $GITHUB_OUTPUT

        case "$SCAN_TYPE" in
          "full")
            echo "should_run_sast=true" >> $GITHUB_OUTPUT
            echo "should_run_container=true" >> $GITHUB_OUTPUT
            echo "should_run_infrastructure=true" >> $GITHUB_OUTPUT
            ;;
          "sast-only")
            echo "should_run_sast=true" >> $GITHUB_OUTPUT
            echo "should_run_container=false" >> $GITHUB_OUTPUT
            echo "should_run_infrastructure=false" >> $GITHUB_OUTPUT
            ;;
          "container-only")
            echo "should_run_sast=false" >> $GITHUB_OUTPUT
            echo "should_run_container=true" >> $GITHUB_OUTPUT
            echo "should_run_infrastructure=false" >> $GITHUB_OUTPUT
            ;;
          "infrastructure-only")
            echo "should_run_sast=false" >> $GITHUB_OUTPUT
            echo "should_run_container=false" >> $GITHUB_OUTPUT
            echo "should_run_infrastructure=true" >> $GITHUB_OUTPUT
            ;;
        esac

  run-sast-pipeline:
    name: Trigger SAST Pipeline
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.should_run_sast == 'true'
    uses: ./.github/workflows/sast.yml
    with:
      post_pr_comment: false
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  run-container-pipeline:
    name: Trigger Container Security Pipeline
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.should_run_container == 'true'
    uses: ./.github/workflows/container-scan.yml
    with:
      post_pr_comment: false
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  infrastructure-security:
    name: Infrastructure Security Analysis
    runs-on: ubuntu-latest
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.should_run_infrastructure == 'true'
    timeout-minutes: 20
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Install security tools
      run: |
        # Install Checkov for Infrastructure as Code scanning
        pip install checkov

        # Install Terrascan
        curl -L "$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E "https://.+?_Linux_x86_64.tar.gz")" > terrascan.tar.gz
        tar -xf terrascan.tar.gz terrascan && rm terrascan.tar.gz
        sudo mv terrascan /usr/local/bin

        # Install Trivy for infrastructure scanning
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install -y trivy

    - name: Terraform Security Scan - Trivy
      run: |
        echo "🔍 Running Trivy infrastructure security scan..."
        cd infrastructure
        trivy config --format sarif --output trivy-results.sarif .
        trivy config --format json --output trivy-results.json .
        trivy config --output trivy-results.txt .
      continue-on-error: true  # Continue even if security issues are found

    - name: Terraform Security Scan - Checkov
      run: |
        echo "🏗️ Running Checkov infrastructure security scan..."
        cd infrastructure
        checkov -d . --framework terraform --output sarif --output-file-path checkov-results.sarif
        checkov -d . --framework terraform --output json --output-file-path checkov-results.json
        checkov -d . --framework terraform --output cli --output-file-path checkov-results.txt
      continue-on-error: true  # Continue even if security issues are found

    - name: Terraform Security Scan - Terrascan
      run: |
        echo "🔧 Running Terrascan infrastructure security scan..."
        terrascan scan -i terraform -t all -d infrastructure --sarif-output infrastructure/terrascan-results.sarif
        terrascan scan -i terraform -t all -d infrastructure --output json > infrastructure/terrascan-results.json
        terrascan scan -i terraform -t all -d infrastructure > infrastructure/terrascan-results.txt
      continue-on-error: true  # Continue even if security issues are found

    - name: Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.actor != 'nektos/act' && hashFiles('infrastructure/trivy-results.sarif') != ''
      with:
        sarif_file: infrastructure/trivy-results.sarif
      continue-on-error: true

    - name: Upload Checkov Results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.actor != 'nektos/act' && hashFiles('infrastructure/checkov-results.sarif') != ''
      with:
        sarif_file: infrastructure/checkov-results.sarif
      continue-on-error: true

    - name: Upload Terrascan Results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.actor != 'nektos/act' && hashFiles('infrastructure/terrascan-results.sarif') != ''
      with:
        sarif_file: infrastructure/terrascan-results.sarif
      continue-on-error: true

    - name: Archive infrastructure scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: infrastructure-security-results
        path: |
          infrastructure/*-results.*
        retention-days: 30

  aws-security-analysis:
    name: AWS Security Configuration Analysis
    runs-on: ubuntu-latest
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.should_run_infrastructure == 'true' && github.ref == 'refs/heads/main'
    timeout-minutes: 15
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Configure AWS Credentials
      id: aws-auth
      uses: aws-actions/configure-aws-credentials@v5
      continue-on-error: true  # Don't fail if AWS credentials aren't available
      with:
        role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-oidc-role"
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: "github-actions-security-${{ github.run_id }}"

    - name: Install AWS security tools
      run: |
        pip install awscli boto3

        # Install Scout Suite for AWS security analysis
        pip install scoutsuite

    - name: Run AWS Security Assessment
      run: |
        # Create a basic AWS security report
        mkdir -p aws-security-report

        # Check if AWS credentials were configured successfully
        if aws sts get-caller-identity >/dev/null 2>&1; then
          echo "✅ AWS credentials configured successfully"

          # Check S3 bucket security
          echo "# AWS Security Assessment Report" > aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md
          echo "**Account:** $(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo 'Unable to determine')" >> aws-security-report/aws-security.md
          echo "**Region:** ${{ env.AWS_REGION }}" >> aws-security-report/aws-security.md
          echo "**Generated:** $(date)" >> aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md

          echo "## S3 Bucket Security" >> aws-security-report/aws-security.md
          aws s3api list-buckets --query 'Buckets[].Name' --output table >> aws-security-report/aws-security.md 2>/dev/null || echo "No S3 buckets found or access denied" >> aws-security-report/aws-security.md

          echo "" >> aws-security-report/aws-security.md
          echo "## IAM Roles" >> aws-security-report/aws-security.md
          aws iam list-roles --query 'Roles[?contains(RoleName, `form-extraction`) || contains(RoleName, `github`)].RoleName' --output table >> aws-security-report/aws-security.md 2>/dev/null || echo "No matching IAM roles found or access denied" >> aws-security-report/aws-security.md

          echo "" >> aws-security-report/aws-security.md
          echo "## Lambda Functions" >> aws-security-report/aws-security.md
          aws lambda list-functions --query 'Functions[?contains(FunctionName, `field`) || contains(FunctionName, `doc`) || contains(FunctionName, `image`)].FunctionName' --output table >> aws-security-report/aws-security.md 2>/dev/null || echo "No matching Lambda functions found or access denied" >> aws-security-report/aws-security.md
        else
          echo "⚠️  AWS credentials not available or invalid"
          echo "# AWS Security Assessment - Credentials Not Available" > aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md
          echo "AWS credentials could not be configured for this repository." >> aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md
          echo "## Possible reasons:" >> aws-security-report/aws-security.md
          echo "1. No AWS OIDC role configured for this repository" >> aws-security-report/aws-security.md
          echo "2. The repository doesn't contain AWS resources" >> aws-security-report/aws-security.md
          echo "3. AWS account credentials haven't been set up" >> aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md
          echo "## To enable AWS security analysis:" >> aws-security-report/aws-security.md
          echo "1. Set up an AWS OIDC role for GitHub Actions" >> aws-security-report/aws-security.md
          echo "2. Update the AWS_ACCOUNT_ID environment variable in the workflow" >> aws-security-report/aws-security.md
          echo "3. Ensure the role has appropriate read permissions for security analysis" >> aws-security-report/aws-security.md
          echo "" >> aws-security-report/aws-security.md
          echo "_This is not an error - many hardening pipelines don't require AWS access._" >> aws-security-report/aws-security.md
        fi

    - name: Upload AWS security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: aws-security-report
        path: aws-security-report/
        retention-days: 30

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Allow pipeline to continue even if license issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install license checker
      run: |
        pip install pip-licenses

    - name: Check Python package licenses
      run: |
        mkdir -p license-reports

        # Check licenses for main requirements
        if [ -f "backend/app/requirements.txt" ]; then
          pip install -r backend/app/requirements.txt
          pip-licenses --format json --output-file license-reports/app-licenses.json || true
          pip-licenses --format plain --output-file license-reports/app-licenses.txt || true
        fi

        # Check licenses for lambda functions
        find backend/aws/lambda -name "requirements.txt" | while read req_file; do
          dir_name=$(dirname "$req_file" | sed 's|/|_|g')
          pip install -r "$req_file" --quiet
          pip-licenses --format json --output-file "license-reports/${dir_name}-licenses.json" || true
          pip-licenses --format plain --output-file "license-reports/${dir_name}-licenses.txt" || true
        done

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance-reports
        path: license-reports/
        retention-days: 30

  security-summary:
    name: Security Hardening Summary
    runs-on: ubuntu-latest
    needs: [scan-coordinator, run-sast-pipeline, run-container-pipeline, infrastructure-security, aws-security-analysis, license-compliance]
    if: always()

    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v5

    - name: Create comprehensive security report
      run: |
        echo "# 🛡️ Security Analysis Summary" > security-hardening-report.md
        echo "" >> security-hardening-report.md

        # Initialize counters
        CRITICAL_COUNT=0
        HIGH_COUNT=0
        MEDIUM_COUNT=0
        LOW_COUNT=0
        INFO_COUNT=0

        # Track processed files to avoid duplicates
        processed_files=""

        # Process unique SARIF files only once
        for sarif_file in $(find . -name "*.sarif" 2>/dev/null | sort -u); do
          if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
            filename=$(basename "$sarif_file")
            # Skip if already processed
            if echo "$processed_files" | grep -q "$filename"; then
              continue
            fi
            processed_files="$processed_files $filename"

            if command -v jq >/dev/null 2>&1; then
              crit=$(jq -r '.runs[]?.results[]? | select(.level == "error" or .properties?.severity == "critical") | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)
              high=$(jq -r '.runs[]?.results[]? | select(.level == "warning" or .properties?.severity == "high") | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)
              med=$(jq -r '.runs[]?.results[]? | select(.properties?.severity == "medium") | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)
              low=$(jq -r '.runs[]?.results[]? | select(.properties?.severity == "low") | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)
              info=$(jq -r '.runs[]?.results[]? | select(.level == "note" or .properties?.severity == "info") | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)

              CRITICAL_COUNT=$((CRITICAL_COUNT + crit))
              HIGH_COUNT=$((HIGH_COUNT + high))
              MEDIUM_COUNT=$((MEDIUM_COUNT + med))
              LOW_COUNT=$((LOW_COUNT + low))
              INFO_COUNT=$((INFO_COUNT + info))
            fi
          fi
        done

        TOTAL_ISSUES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT + INFO_COUNT))

        echo "## � Security Score" >> security-hardening-report.md
        echo "" >> security-hardening-report.md
        echo "| Severity | Count | Action Required |" >> security-hardening-report.md
        echo "|----------|-------|-----------------|" >> security-hardening-report.md
        echo "| 🔴 Critical | **$CRITICAL_COUNT** | Immediate |" >> security-hardening-report.md
        echo "| 🟠 High | **$HIGH_COUNT** | Within 24h |" >> security-hardening-report.md
        echo "| 🟡 Medium | **$MEDIUM_COUNT** | Within 1 week |" >> security-hardening-report.md
        echo "| 🔵 Low | **$LOW_COUNT** | Within 1 month |" >> security-hardening-report.md
        echo "| **📊 Total** | **$TOTAL_ISSUES** | - |" >> security-hardening-report.md
        echo "" >> security-hardening-report.md

        # Risk assessment
        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "🚨 **CRITICAL RISK:** $CRITICAL_COUNT critical vulnerabilities need immediate attention!" >> security-hardening-report.md
        elif [ "$HIGH_COUNT" -gt 0 ]; then
          echo "⚠️ **HIGH RISK:** $HIGH_COUNT high-severity issues need review within 24h." >> security-hardening-report.md
        elif [ "$MEDIUM_COUNT" -gt 5 ]; then
          echo "🟡 **MEDIUM RISK:** $MEDIUM_COUNT medium-severity issues to address." >> security-hardening-report.md
        else
          echo "✅ **LOW RISK:** Good security posture!" >> security-hardening-report.md
        fi
        echo "" >> security-hardening-report.md

        echo "## � Next Steps" >> security-hardening-report.md
        echo "" >> security-hardening-report.md

        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "1. � **URGENT:** Download security reports and patch critical vulnerabilities" >> security-hardening-report.md
          echo "2. 🔍 Focus on: Container vulnerabilities, code security issues, exposed secrets" >> security-hardening-report.md
        elif [ "$HIGH_COUNT" -gt 0 ]; then
          echo "1. ⚡ **HIGH PRIORITY:** Review and patch high-severity findings within 24h" >> security-hardening-report.md
        else
          echo "1. 🔍 Review medium/low findings during next sprint planning" >> security-hardening-report.md
        fi

        echo "3. � **Download reports:** [View all artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> security-hardening-report.md
        echo "4. 🤖 **Automation:** Enable [Dependabot](${{ github.server_url }}/${{ github.repository }}/settings/security_analysis) for dependency updates" >> security-hardening-report.md
        echo "" >> security-hardening-report.md
        echo "_Report generated: $(date)_" >> security-hardening-report.md

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: security-hardening-report
        path: security-hardening-report.md
        retention-days: 90

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v8
      continue-on-error: true  # Don't fail the workflow if commenting fails
      with:
        script: |
          const fs = require('fs');

          console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
          console.log('Event name:', context.eventName);
          console.log('PR number:', context.issue?.number);
          console.log('Is from fork:', context.payload.pull_request?.head?.repo?.fork || false);

          try {
            const report = fs.readFileSync('security-hardening-report.md', 'utf8');
            const summary = report.length > 65000 ?
              report.substring(0, 65000) + '\n\n... (report truncated, download full report from artifacts)' :
              report;

            const commentBody = `## 🛡️ Security Hardening Pipeline Results\n\n<!-- security-hardening-comment-marker -->\n\n${summary}`;

            // Check for existing security hardening comments to update instead of creating new ones
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            console.log('🔍 Found', comments.data.length, 'existing comments');

            const existingComment = comments.data.find(comment => {
              const hasMarker = comment.body.includes('security-hardening-comment-marker');
              const isGitHubActions = comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot';
              console.log('Comment from', comment.user.login, 'type:', comment.user.type, 'has marker:', hasMarker);
              return hasMarker && isGitHubActions;
            });

            if (existingComment) {
              // Update existing comment with latest information
              console.log('🔄 Updating existing security hardening comment');
              const timestamp = new Date().toLocaleString();
              const commitSha = context.sha.substring(0, 8);
              const updatedBody = commentBody + `\n\n---\n*Last updated: ${timestamp} | Commit: ${commitSha} | [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updatedBody
              });
            } else {
              // Create new comment
              console.log('� Creating new security hardening comment');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

            console.log('✅ Successfully posted/updated security hardening summary comment');
          } catch (error) {
            console.log('❌ Failed to post security summary comment:', error.message);
            console.log('Error status:', error.status);

            if (error.status === 403) {
              console.log('🔒 Permission denied - this can happen when:');
              console.log('   • Running on a fork (security restriction)');
              console.log('   • Missing pull-requests: write permission');
              console.log('   • Repository settings restrict PR comments');
            } else if (error.status === 404) {
              console.log('🔍 Resource not found - check if PR exists');
            }

            console.log('📋 Security hardening report is still available in workflow artifacts');
          }
