name: Release Preview

on:
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]

jobs:
  release-preview:
    name: Release Preview
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze PR Commits
        id: analyze
        run: |
          echo "## 🚀 Release Preview" > preview.md
          echo "" >> preview.md

          # Get the base branch commit
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Get commits in this PR
          git log --oneline ${BASE_SHA}..${HEAD_SHA} > pr_commits.txt

          # Analyze PR commits for conventional format
          echo "### 📝 Changes in this PR" >> preview.md
          echo "" >> preview.md

          # Check for conventional commits in this PR
          FEAT_COUNT=$(git log ${BASE_SHA}..${HEAD_SHA} --grep="^feat" --oneline | wc -l | tr -d ' ')
          FIX_COUNT=$(git log ${BASE_SHA}..${HEAD_SHA} --grep="^fix" --oneline | wc -l | tr -d ' ')
          BREAKING_COUNT=$(git log ${BASE_SHA}..${HEAD_SHA} --grep="BREAKING CHANGE" --oneline | wc -l | tr -d ' ')

          # Determine version bump
          if [ "$BREAKING_COUNT" -gt 0 ]; then
            echo "**Impact:** 🔴 Major version bump (breaking changes detected)" >> preview.md
            BUMP_TYPE="major"
          elif [ "$FEAT_COUNT" -gt 0 ]; then
            echo "**Impact:** 🟡 Minor version bump (new features)" >> preview.md
            BUMP_TYPE="minor"
          elif [ "$FIX_COUNT" -gt 0 ]; then
            echo "**Impact:** 🟢 Patch version bump (bug fixes)" >> preview.md
            BUMP_TYPE="patch"
          else
            echo "**Impact:** ⚪ No version bump (no conventional commits)" >> preview.md
            BUMP_TYPE="none"
          fi

          echo "" >> preview.md

          # Show PR-specific commits that will affect release
          if [ "$BUMP_TYPE" != "none" ]; then
            echo "**Commits that will appear in changelog:**" >> preview.md
            echo "" >> preview.md

            # Features
            if [ "$FEAT_COUNT" -gt 0 ]; then
              echo "🆕 **Features ($FEAT_COUNT):**" >> preview.md
              git log ${BASE_SHA}..${HEAD_SHA} --grep="^feat" --pretty=format:"- %s" >> preview.md
              echo "" >> preview.md
              echo "" >> preview.md
            fi

            # Fixes
            if [ "$FIX_COUNT" -gt 0 ]; then
              echo "🐛 **Bug Fixes ($FIX_COUNT):**" >> preview.md
              git log ${BASE_SHA}..${HEAD_SHA} --grep="^fix" --pretty=format:"- %s" >> preview.md
              echo "" >> preview.md
              echo "" >> preview.md
            fi

            # Breaking changes
            if [ "$BREAKING_COUNT" -gt 0 ]; then
              echo "💥 **Breaking Changes ($BREAKING_COUNT):**" >> preview.md
              git log ${BASE_SHA}..${HEAD_SHA} --grep="BREAKING CHANGE" --pretty=format:"- %s" >> preview.md
              echo "" >> preview.md
              echo "" >> preview.md
            fi
          else
            echo "ℹ️ This PR contains only non-release commits (docs, chore, style, etc.)" >> preview.md
            echo "" >> preview.md
          fi

          # Show all PR commits for reference
          echo "**All commits in this PR:**" >> preview.md
          echo '```' >> preview.md
          cat pr_commits.txt >> preview.md
          echo '```' >> preview.md
          echo "" >> preview.md

          echo "### 💡 Quick Reference" >> preview.md
          echo "- \`feat:\` → minor bump • \`fix:\` → patch bump • \`BREAKING CHANGE:\` → major bump" >> preview.md
          echo "- \`docs:\`, \`chore:\`, \`style:\`, \`test:\` → no release" >> preview.md

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const previewContent = fs.readFileSync('preview.md', 'utf8');

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 Release Preview')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: previewContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: previewContent
              });
            }
