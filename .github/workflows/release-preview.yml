name: Release Preview

on:
  pull_request:
    branches:
      - main
      - master
    types: [opened, synchronize, reopened]

jobs:
  release-preview:
    name: Release Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Release Preview
        id: preview
        run: |
          # Run release-it dry run to get actual release information
          echo "Running release-it dry run to generate preview..."
          npm run release:preview > release_output.txt 2>&1 || echo "Release dry run completed"

          # Extract version information
          CURRENT_VERSION=$(grep -o "Let's release.*(\(.*\)\.\.\.\(.*\))" release_output.txt | sed 's/.*(\(.*\)\.\.\.\(.*\)).*/\1/' || echo "0.0.0")
          NEW_VERSION=$(grep -o "Let's release.*(\(.*\)\.\.\.\(.*\))" release_output.txt | sed 's/.*(\(.*\)\.\.\.\(.*\)).*/\2/' || echo "unknown")

          echo "## � Release Preview" > preview.md
          echo "" >> preview.md

          if [ "$NEW_VERSION" != "unknown" ] && [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
            # Version will be bumped
            echo "### 📦 Version Update" >> preview.md
            echo "**Current:** \`$CURRENT_VERSION\` → **New:** \`$NEW_VERSION\`" >> preview.md
            echo "" >> preview.md

            # Extract and format changelog
            echo "### � Changelog" >> preview.md
            echo "" >> preview.md

            # Extract changelog section from release output
            sed -n '/^Changelog:/,/^Changeset:/p' release_output.txt | sed '1d;$d' | sed 's/^//' >> preview.md
            echo "" >> preview.md

            # Extract file changes that would be made
            echo "### � Files that would be modified" >> preview.md
            echo "" >> preview.md

            # Extract changeset information
            if grep -q "Changeset:" release_output.txt; then
              echo "\`\`\`" >> preview.md
              sed -n '/^Changeset:/,/^🔗/p' release_output.txt | sed '1d;$d' | grep -E "^\s*[MAD]\s" >> preview.md || echo "No file changes detected" >> preview.md
              echo "\`\`\`" >> preview.md
            else
              echo "- CHANGELOG.md (updated with new entries)" >> preview.md
              echo "- package.json (version bump)" >> preview.md

              # Check if regex bumper would make changes
              if grep -q "release-it-regex-bumper" .release-it.json; then
                echo "- docs/reusing-workflows.md (version references updated)" >> preview.md
              fi
            fi

            echo "" >> preview.md
            echo "### ✅ Actions that would be performed" >> preview.md
            echo "- 📝 Update CHANGELOG.md with new entries" >> preview.md
            echo "- 🏷️ Create git tag \`$NEW_VERSION\`" >> preview.md
            echo "- 📤 Push changes and tag to repository" >> preview.md
            echo "- � Create GitHub release" >> preview.md

          else
            # No version bump
            echo "### ℹ️ No Release Required" >> preview.md
            echo "" >> preview.md
            echo "This PR does not contain any conventional commits that would trigger a release." >> preview.md
            echo "" >> preview.md
            echo "**Conventional commit types that trigger releases:**" >> preview.md
            echo "- \`feat:\` → minor version bump" >> preview.md
            echo "- \`fix:\` → patch version bump" >> preview.md
            echo "- \`BREAKING CHANGE:\` → major version bump" >> preview.md
            echo "" >> preview.md
            echo "**Types that don't trigger releases:** \`docs:\`, \`chore:\`, \`style:\`, \`test:\`, \`ci:\`, \`build:\`, \`refactor:\`, \`perf:\`" >> preview.md
          fi

          echo "" >> preview.md
          echo "---" >> preview.md
          echo "*This preview is generated by running \`release-it --dry-run --ci\`*" >> preview.md

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const previewContent = fs.readFileSync('preview.md', 'utf8');

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🚀 Release Preview')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: previewContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: previewContent
              });
            }
