name: SAST Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Commented out daily schedule to reduce noise - re-enable as needed
  # schedule:
  #   # Run SAST scan daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:
  workflow_call:

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.12'

jobs:
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 45
    continue-on-error: true  # Allow pipeline to continue even if security issues found
    # Skip CodeQL in Act - it requires GitHub's infrastructure
    if: github.actor != 'nektos/act'
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: ./.github/codeql/codeql-config.yml

    - name: Set up Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Python dependencies
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        # Install dependencies from all requirements files
        find . -name "requirements.txt" -exec pip install -r {} \;
        # Install additional dependencies for Lambda functions
        pip install boto3 botocore

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

  opengrep-analysis:
    name: OpenGrep SAST
    runs-on: ubuntu-latest
    timeout-minutes: 20
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install OpenGrep
      run: |
        # Download OpenGrep binary directly from GitHub releases (more secure)
        wget -O opengrep https://github.com/opengrep/opengrep/releases/latest/download/opengrep_manylinux_x86
        chmod +x opengrep
        sudo mv opengrep /usr/local/bin/opengrep

    - name: Run OpenGrep Security Analysis
      run: |
        echo "🔍 Running OpenGrep comprehensive security analysis..."
        mkdir -p opengrep-reports
        # Run OpenGrep with comprehensive scanning
        opengrep scan --sarif-output=opengrep-reports/opengrep.sarif . || true
        opengrep scan --json-output=opengrep-reports/opengrep.json . || true
        opengrep scan --text-output=opengrep-reports/opengrep.txt . || true

        # Move files to root for artifact upload
        cp opengrep-reports/* . 2>/dev/null || true
      continue-on-error: true  # Continue even if security issues are found
      # Note: OpenGrep provides all security rules for free, no paywalls

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: opengrep.sarif
      if: always() && github.actor != 'nektos/act'

    - name: Upload OpenGrep artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opengrep-reports
        path: |
          opengrep.json
          opengrep.txt
          opengrep-reports/
        retention-days: 30
      if: always()

  bandit-analysis:
    name: Bandit Python Security
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Bandit
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]

    - name: Run Bandit Security Scan
      run: |
        echo "🔍 Running Bandit Python security analysis..."
        mkdir -p bandit-reports

        # Generate reports with explicit output verification
        echo "Generating SARIF report..."
        bandit -r . -f sarif -o bandit-reports/bandit-report.sarif || true

        echo "Generating JSON report..."
        bandit -r . -f json -o bandit-reports/bandit-report.json || true

        echo "Generating text report..."
        bandit -r . -f txt -o bandit-reports/bandit-report.txt || true

        # Copy and verify files
        cp bandit-reports/* . 2>/dev/null || true

        echo "Generated Bandit files:"
        ls -la bandit-reports/

        # Show file sizes to verify content
        for f in bandit-reports/*; do
          if [ -f "$f" ]; then
            echo "File: $f - Size: $(wc -c < "$f") bytes"
          fi
        done
      continue-on-error: true

    - name: Upload Bandit SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: bandit-report.sarif
      if: always() && github.actor != 'nektos/act'

    - name: Upload Bandit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bandit-reports
        path: |
          bandit-report.json
          bandit-report.txt
          bandit-reports/
        retention-days: 30
      if: always()

  safety-check:
    name: Safety - Python Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Allow pipeline to continue even if vulnerabilities found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Safety
      run: |
        python -m pip install --upgrade pip
        pip install safety

    - name: Check Python dependencies for vulnerabilities
      run: |
        echo "🔒 Scanning Python dependencies for vulnerabilities..."
        mkdir -p safety-reports

        # Safety v3+ uses different syntax - check each requirements file
        find . -name "requirements.txt" -print0 | while IFS= read -r -d '' req_file; do
          echo "Checking: $req_file"
          # Use correct Safety v3 syntax
          safety check --requirements "$req_file" --output json > "safety-reports/safety-$(basename $(dirname "$req_file")).json" 2>/dev/null || true
          safety check --requirements "$req_file" --output text > "safety-reports/safety-$(basename $(dirname "$req_file")).txt" 2>/dev/null || true
        done

        # Generate overall scan
        safety check --output json > safety-reports/safety-combined.json 2>/dev/null || true
        safety check --output text > safety-reports/safety-combined.txt 2>/dev/null || true

        # Copy files to root for upload
        cp safety-reports/* . 2>/dev/null || true

        # Show what was generated
        echo "Generated files:"
        ls -la safety-reports/ || true
      continue-on-error: true

    - name: Upload Safety artifacts
      uses: actions/upload-artifact@v4
      with:
        name: safety-reports
        path: |
          safety-*.json
          safety-report.txt
          safety-reports/
        retention-days: 30
      if: always()

  terraform-security:
    name: Terraform Security - Checkov
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov Infrastructure Security Scan
      run: |
        echo "🏗️ Scanning Terraform infrastructure for security issues..."
        mkdir -p checkov-reports

        # Run Checkov with explicit output files
        echo "Generating SARIF report..."
        checkov -d infrastructure/ --framework terraform --output sarif --output-file-path checkov-reports/checkov-terraform.sarif --quiet || true

        echo "Generating JSON report..."
        checkov -d infrastructure/ --framework terraform --output json --output-file-path checkov-reports/checkov-terraform.json --quiet || true

        echo "Generating CLI report..."
        checkov -d infrastructure/ --framework terraform --output cli --output-file-path checkov-reports/checkov-terraform.txt --quiet || true

        # Copy and verify files
        cp checkov-reports/* . 2>/dev/null || true

        echo "Generated Checkov files:"
        ls -la checkov-reports/

        # Show file sizes
        for f in checkov-reports/*; do
          if [ -f "$f" ]; then
            echo "File: $f - Size: $(wc -c < "$f") bytes"
          fi
        done
      continue-on-error: true

    - name: Upload Checkov SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-terraform.sarif
      if: always() && github.actor != 'nektos/act'

    - name: Upload Checkov artifacts
      uses: actions/upload-artifact@v4
      with:
        name: checkov-reports
        path: |
          checkov-terraform.json
          checkov-terraform.txt
          checkov-reports/
        retention-days: 30
      if: always()

  dockerfile-security:
    name: Dockerfile Security - Hadolint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Allow pipeline to continue even if security issues found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Hadolint
      run: |
        wget -O hadolint https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
        chmod +x hadolint
        sudo mv hadolint /usr/local/bin/

    - name: Run Hadolint on all Dockerfiles
      run: |
        echo "🐳 Scanning Dockerfiles for security and best practices..."
        mkdir -p hadolint-reports
        find . -name "Dockerfile*" -type f | while read -r dockerfile; do
          echo "Scanning: $dockerfile"
          dir_name=$(dirname "$dockerfile" | sed 's|/|_|g' | sed 's|^_||')
          hadolint "$dockerfile" --format sarif > "hadolint-reports/hadolint-${dir_name}.sarif" 2>/dev/null || true
          hadolint "$dockerfile" --format json > "hadolint-reports/hadolint-${dir_name}.json" 2>/dev/null || true
          hadolint "$dockerfile" > "hadolint-reports/hadolint-${dir_name}.txt" 2>/dev/null || true
        done

        # Copy files to root for upload
        cp hadolint-reports/* . 2>/dev/null || true
      continue-on-error: true  # Continue even if Dockerfile issues are found

    - name: Upload Hadolint artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hadolint-reports
        path: |
          hadolint-reports/
          hadolint-*.json
          hadolint-*.txt
        retention-days: 30
      if: always()

  secrets-detection:
    name: Secrets Detection - Gitleaks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true  # Allow pipeline to continue even if secrets found

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Gitleaks
      run: |
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run Gitleaks Secrets Detection
      run: |
        echo "🔑 Scanning for secrets and credentials..."
        mkdir -p gitleaks-reports

        # Run Gitleaks with explicit outputs
        echo "Generating SARIF report..."
        gitleaks detect --source . --report-format sarif --report-path gitleaks-reports/gitleaks-report.sarif --exit-code 0 || true

        echo "Generating JSON report..."
        gitleaks detect --source . --report-format json --report-path gitleaks-reports/gitleaks-report.json --exit-code 0 || true

        # Copy and verify files
        cp gitleaks-reports/* . 2>/dev/null || true

        echo "Generated Gitleaks files:"
        ls -la gitleaks-reports/

        # Show findings count
        if [ -f "gitleaks-reports/gitleaks-report.json" ]; then
          echo "Gitleaks results:"
          if [ -s "gitleaks-reports/gitleaks-report.json" ]; then
            # Count findings in JSON
            python3 -c "import json; data=json.load(open('gitleaks-reports/gitleaks-report.json')); print(f'Found {len(data)} potential secrets')" 2>/dev/null || echo "Could not parse results"
          else
            echo "No secrets detected"
          fi
        fi
      continue-on-error: true

    - name: Upload Gitleaks SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gitleaks-report.sarif
      if: always() && github.actor != 'nektos/act'

    - name: Upload Gitleaks artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-reports
        path: |
          gitleaks-report.json
          gitleaks-reports/
        retention-days: 30
      if: always()

  sast-summary:
    name: SAST Summary
    runs-on: ubuntu-latest
    needs: [codeql-analysis, opengrep-analysis, bandit-analysis, safety-check, terraform-security, dockerfile-security, secrets-detection]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create SAST Summary
      run: |
        echo "# SAST Security Analysis Summary" > sast-summary.md
        echo "" >> sast-summary.md
        echo "## Scan Results" >> sast-summary.md
        echo "" >> sast-summary.md

        # Check job statuses
        echo "| Tool | Status |" >> sast-summary.md
        echo "|------|--------|" >> sast-summary.md
        echo "| CodeQL | ${{ needs.codeql-analysis.result }} |" >> sast-summary.md
        echo "| OpenGrep | ${{ needs.opengrep-analysis.result }} |" >> sast-summary.md
        echo "| Bandit | ${{ needs.bandit-analysis.result }} |" >> sast-summary.md
        echo "| Safety | ${{ needs.safety-check.result }} |" >> sast-summary.md
        echo "| Checkov (Terraform) | ${{ needs.terraform-security.result }} |" >> sast-summary.md
        echo "| Hadolint (Docker) | ${{ needs.dockerfile-security.result }} |" >> sast-summary.md
        echo "| Gitleaks (Secrets) | ${{ needs.secrets-detection.result }} |" >> sast-summary.md
        echo "" >> sast-summary.md

        echo "## Recommendations" >> sast-summary.md
        echo "" >> sast-summary.md
        echo "1. Review all findings in the Security tab" >> sast-summary.md
        echo "2. Address high and critical severity issues first" >> sast-summary.md
        echo "3. Update dependencies with known vulnerabilities" >> sast-summary.md
        echo "4. Implement security fixes for infrastructure issues" >> sast-summary.md
        echo "" >> sast-summary.md
        echo "Generated on: $(date)" >> sast-summary.md

    - name: Upload SAST Summary
      uses: actions/upload-artifact@v4
      with:
        name: sast-summary
        path: sast-summary.md
        retention-days: 30

    - name: Comment PR with SAST Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('sast-summary.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });
