name: Checkov Scanner

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      iac_path:
        description: 'Relative path to the infrastructure-as-code directory to scan'
        required: false
        type: string
        default: 'infrastructure'
      framework:
        description: 'IaC framework to scan (terraform, cloudformation, kubernetes, etc.)'
        required: false
        type: string
        default: 'terraform'
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  checkov-scan:
    name: Checkov Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Validate scan directory
      id: validate
      run: |
        IAC_PATH="${{ inputs.iac_path }}"
        if [ -z "$IAC_PATH" ]; then
          IAC_PATH='infrastructure'
        fi

        if [ ! -d "$IAC_PATH" ]; then
          echo "‚ö†Ô∏è  Directory '$IAC_PATH' not found. Skipping Checkov scan."
          echo "has_iac=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "has_iac=true" >> $GITHUB_OUTPUT
        echo "iac_path=$IAC_PATH" >> $GITHUB_OUTPUT
        echo "‚úÖ Found IaC directory: $IAC_PATH"

        mkdir -p "$IAC_PATH"/security-reports
        echo "üìÅ Created security reports directory"

    - name: Run Checkov Infrastructure Scan
      if: steps.validate.outputs.has_iac == 'true'
      uses: bridgecrewio/checkov-action@v12.2842.0
      with:
        directory: ${{ steps.validate.outputs.iac_path }}
        framework: ${{ inputs.framework }}
        output_format: sarif,json,cli
        output_file_path: ${{ steps.validate.outputs.iac_path }}/security-reports/checkov-results.sarif,${{ steps.validate.outputs.iac_path }}/security-reports/checkov-results.json,${{ steps.validate.outputs.iac_path }}/security-reports/checkov-results.txt
        soft_fail: true
      continue-on-error: true

    - name: Upload Checkov SARIF results to GitHub Security
      if: inputs.enable_code_security == true && steps.validate.outputs.has_iac == 'true' && always() && github.actor != 'nektos/act'
      uses: github/codeql-action/upload-sarif@v4
      with:
        sarif_file: ${{ steps.validate.outputs.iac_path }}/security-reports/checkov-results.sarif
        category: checkov
      continue-on-error: true

    - name: Analyze Checkov results
      if: steps.validate.outputs.has_iac == 'true' && always()
      run: |
        IAC_PATH="${{ steps.validate.outputs.iac_path }}"
        JSON_FILE="$IAC_PATH/security-reports/checkov-results.json"

        if [ ! -f "$JSON_FILE" ]; then
          echo "‚ö†Ô∏è  No Checkov results found"
          exit 0
        fi

        echo "üìä Checkov Security Analysis"
        echo "============================="

        # Checkov JSON format has different structure
        CRITICAL=$(jq '[.results.failed_checks[] | select(.severity == "CRITICAL")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
        HIGH=$(jq '[.results.failed_checks[] | select(.severity == "HIGH")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
        MEDIUM=$(jq '[.results.failed_checks[] | select(.severity == "MEDIUM")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
        LOW=$(jq '[.results.failed_checks[] | select(.severity == "LOW")] | length' "$JSON_FILE" 2>/dev/null || echo "0")

        # If severity not available, count all failed checks
        if [ "$CRITICAL" == "0" ] && [ "$HIGH" == "0" ] && [ "$MEDIUM" == "0" ] && [ "$LOW" == "0" ]; then
          TOTAL=$(jq '.results.failed_checks | length' "$JSON_FILE" 2>/dev/null || echo "0")
          HIGH=$TOTAL
        else
          TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))
        fi

        PASSED=$(jq '.results.passed_checks | length' "$JSON_FILE" 2>/dev/null || echo "0")

        echo "üîç Check Summary:"
        echo "  Critical: $CRITICAL"
        echo "  High: $HIGH"
        echo "  Medium: $MEDIUM"
        echo "  Low: $LOW"
        echo "  Passed: $PASSED"

        if [ "$TOTAL" -gt 0 ]; then
          echo "‚ö†Ô∏è  Found $TOTAL failed checks"
          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "::warning title=High Severity Issues::Found $CRITICAL critical and $HIGH high severity issues in IaC"
          fi
        else
          echo "‚úÖ All checks passed"
        fi

    - name: Upload Checkov artifacts
      if: steps.validate.outputs.has_iac == 'true' && always()
      uses: actions/upload-artifact@v4
      with:
        name: checkov-scan-results
        path: |
          ${{ steps.validate.outputs.iac_path }}/security-reports/checkov-results.*
        retention-days: 30

    - name: Generate scanner summary section
      if: always()
      run: |
        mkdir -p scanner-summaries

        echo "<details>" > scanner-summaries/checkov.md
        echo "<summary>üèóÔ∏è  Checkov Scanner</summary>" >> scanner-summaries/checkov.md
        echo "" >> scanner-summaries/checkov.md

        if [ "${{ steps.validate.outputs.has_iac }}" == "true" ]; then
          IAC_PATH="${{ steps.validate.outputs.iac_path }}"
          JSON_FILE="$IAC_PATH/security-reports/checkov-results.json"

          if [ -f "$JSON_FILE" ]; then
            echo "**Status:** ‚úÖ Completed" >> scanner-summaries/checkov.md
            echo "" >> scanner-summaries/checkov.md

            CRITICAL=$(jq '[.results.failed_checks[] | select(.severity == "CRITICAL")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
            HIGH=$(jq '[.results.failed_checks[] | select(.severity == "HIGH")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
            MEDIUM=$(jq '[.results.failed_checks[] | select(.severity == "MEDIUM")] | length' "$JSON_FILE" 2>/dev/null || echo "0")
            LOW=$(jq '[.results.failed_checks[] | select(.severity == "LOW")] | length' "$JSON_FILE" 2>/dev/null || echo "0")

            if [ "$CRITICAL" == "0" ] && [ "$HIGH" == "0" ] && [ "$MEDIUM" == "0" ] && [ "$LOW" == "0" ]; then
              TOTAL=$(jq '.results.failed_checks | length' "$JSON_FILE" 2>/dev/null || echo "0")
              HIGH=$TOTAL
            else
              TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))
            fi

            PASSED=$(jq '.results.passed_checks | length' "$JSON_FILE" 2>/dev/null || echo "0")

            echo "**Failed Checks:** $TOTAL" >> scanner-summaries/checkov.md
            echo "**Passed Checks:** $PASSED" >> scanner-summaries/checkov.md
            echo "" >> scanner-summaries/checkov.md

            if [ $TOTAL -gt 0 ]; then
              echo "| Severity | Count |" >> scanner-summaries/checkov.md
              echo "|----------|-------|" >> scanner-summaries/checkov.md
              [ $CRITICAL -gt 0 ] && echo "| üî¥ Critical | $CRITICAL |" >> scanner-summaries/checkov.md
              [ $HIGH -gt 0 ] && echo "| üü† High | $HIGH |" >> scanner-summaries/checkov.md
              [ $MEDIUM -gt 0 ] && echo "| üü° Medium | $MEDIUM |" >> scanner-summaries/checkov.md
              [ $LOW -gt 0 ] && echo "| üîµ Low | $LOW |" >> scanner-summaries/checkov.md
              echo "" >> scanner-summaries/checkov.md
            fi

            echo "**üìÅ Artifacts:** [Checkov Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> scanner-summaries/checkov.md
          else
            echo "**Status:** ‚ö†Ô∏è No results generated" >> scanner-summaries/checkov.md
          fi
        else
          echo "**Status:** ‚è≠Ô∏è Skipped (no IaC directory found)" >> scanner-summaries/checkov.md
        fi

        echo "" >> scanner-summaries/checkov.md
        echo "</details>" >> scanner-summaries/checkov.md
        echo "" >> scanner-summaries/checkov.md
      continue-on-error: true

    - name: Upload scanner summary section
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scanner-summary-checkov
        path: scanner-summaries/checkov.md
        retention-days: 7
      continue-on-error: true
