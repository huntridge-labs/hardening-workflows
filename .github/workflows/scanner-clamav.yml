name: ClamAV Malware Scanner

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        type: boolean
        default: true
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false
      scan_path:
        description: 'Path to scan (file, directory, or archive). Defaults to repository root.'
        required: false
        type: string
        default: '.'

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  malware-detection:
    name: Malware Detection - ClamAV
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Checkout hardening-workflows for scripts
      uses: actions/checkout@v5
      with:
        repository: huntridge-labs/hardening-workflows
        # TODO: Update release-it config to set this ref appropriately
        ref: feat/clamav
        path: .hardening-workflows
        sparse-checkout: |
          .github/scripts/extract-archives.py
          .github/scripts/parse-clamav-report.py

    - name: Install ClamAV
      run: |
        echo "üîß Installing ClamAV..."
        sudo apt-get update
        sudo apt-get install -y clamav clamav-daemon
        sudo systemctl stop clamav-daemon || true  # Stop the daemon to avoid conflicts

        echo "üì• Updating ClamAV virus database..."
        # Update virus definitions with retries
        max_attempts=3
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          echo "Attempt $attempt of $max_attempts..."
          if sudo freshclam; then
            echo "‚úÖ Virus database updated successfully"
            break
          else
            echo "‚ö†Ô∏è  freshclam attempt $attempt failed"
            attempt=$((attempt + 1))
            [ $attempt -le $max_attempts ] && sleep 10
          fi
        done

        # Verify ClamAV is working
        echo "üîç Verifying ClamAV installation..."
        clamscan --version
        echo "üìä Database status:"
        sigtool --info /var/lib/clamav/main.cvd || echo "Main database not found"
        sigtool --info /var/lib/clamav/daily.cvd || echo "Daily database not found"
      continue-on-error: false

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: |
        echo "üì¶ Installing Python dependencies..."
        pip install rarfile  # Optional dependency for RAR files
      continue-on-error: true

    - name: Run ClamAV Malware Scan
      run: |
        echo "üîç Running ClamAV malware analysis..."
        mkdir -p clamav-reports clamav-extracted

        SCAN_PATH="${{ inputs.scan_path }}"

        # Check if scan path is an archive or directory containing archives
        SCAN_PATHS=""

        if [ -f "$SCAN_PATH" ]; then
          # Check if it's an archive file by examining actual file contents
          FILE_TYPE=$(file -b --mime-type "$SCAN_PATH")
          echo "üîç Detected file type: $FILE_TYPE"

          case "$FILE_TYPE" in
            application/x-tar|application/x-gzip|application/gzip|application/x-bzip2|application/x-xz|application/zip|application/x-rar|application/x-compressed-tar)
              echo "üì¶ Detected archive file (by content), extracting..."
              SCAN_PATHS=$(python .hardening-workflows/.github/scripts/extract-archives.py "$SCAN_PATH" \
                --output-dir clamav-extracted)
              ;;
            *)
              echo "üìÑ Regular file, scanning directly..."
              SCAN_PATHS="$SCAN_PATH"
              ;;
          esac
        elif [ -d "$SCAN_PATH" ]; then
          # Check if directory contains archives by examining file contents
          # Use file command with mime-type to detect actual archives, not just extensions
          ARCHIVE_COUNT=$(find "$SCAN_PATH" -type f -exec file -b --mime-type {} \; 2>/dev/null | \
            grep -E "application/(x-)?(tar|gzip|bzip2|xz|zip|rar|compressed-tar)" | wc -l)

          if [ "$ARCHIVE_COUNT" -gt 0 ]; then
            echo "üì¶ Directory contains $ARCHIVE_COUNT archive(s) (by content), extracting..."
            SCAN_PATHS=$(python .hardening-workflows/.github/scripts/extract-archives.py "$SCAN_PATH" \
              --output-dir clamav-extracted)
          else
            echo "üìÅ Directory with no archives, scanning directly..."
            SCAN_PATHS="$SCAN_PATH"
          fi
        else
          echo "‚ùå Scan path does not exist: $SCAN_PATH"
          exit 1
        fi

        # If extraction script returned paths, use them; otherwise fallback to original
        if [ -z "$SCAN_PATHS" ]; then
          SCAN_PATHS="$SCAN_PATH"
        fi

        echo "Paths to scan:"
        echo "$SCAN_PATHS"

        # Run ClamAV scan on all paths
        echo "ü¶† Scanning with ClamAV..."
        clamscan --recursive \
          --infected \
          --exclude-dir=".git" \
          --exclude-dir="node_modules" \
          --exclude-dir=".venv" \
          --exclude-dir="__pycache__" \
          --exclude-dir="htmlcov" \
          --exclude-dir="coverage" \
          --exclude-dir=".pytest_cache" \
          --log=clamav-reports/clamav-report.log \
          $SCAN_PATHS || true

        # Generate summary JSON from report
        python .hardening-workflows/.github/scripts/parse-clamav-report.py

        echo "Generated ClamAV files:"
        ls -la clamav-reports/ || echo "No files generated"
      continue-on-error: true

    - name: Upload ClamAV artifacts
      uses: actions/upload-artifact@v4
      with:
        name: clamav-reports
        path: clamav-reports/
        retention-days: 30
      if: always()

    - name: Generate ClamAV summary section
      if: always()
      run: |
        mkdir -p scanner-summaries

        echo "<details>" > scanner-summaries/clamav.md
        echo "<summary>üõ°Ô∏è ClamAV</summary>" >> scanner-summaries/clamav.md
        echo "" >> scanner-summaries/clamav.md

        if [ -d "clamav-reports" ] && [ "$(ls -A clamav-reports)" ]; then
          echo "**Status:** ‚úÖ Completed" >> scanner-summaries/clamav.md
          echo "" >> scanner-summaries/clamav.md

          # Parse results from JSON report
          if [ -f "clamav-reports/clamav-report.json" ] && command -v jq >/dev/null 2>&1; then
            INFECTED_COUNT=$(jq -r '.infected_files // 0' clamav-reports/clamav-report.json 2>/dev/null || echo "0")
            SCANNED_COUNT=$(jq -r '.total_files // 0' clamav-reports/clamav-report.json 2>/dev/null || echo "0")
            ERROR_COUNT=$(jq -r '.error_files // 0' clamav-reports/clamav-report.json 2>/dev/null || echo "0")
          else
            # Fallback to text report parsing
            INFECTED_COUNT=0
            SCANNED_COUNT=0
            ERROR_COUNT=0

            if [ -f "clamav-reports/clamav-report.log" ]; then
              INFECTED_COUNT=$(grep -c "infected\|FOUND" clamav-reports/clamav-report.log 2>/dev/null || echo "0")
              SCANNED_COUNT=$(grep "Files scanned:" clamav-reports/clamav-report.log | sed 's/.*: //' 2>/dev/null || echo "0")
              ERROR_COUNT=$(grep -c "error\|Error" clamav-reports/clamav-report.log 2>/dev/null || echo "0")
            fi
          fi

          echo "**Files Scanned:** $SCANNED_COUNT" >> scanner-summaries/clamav.md
          echo "**Infected Files:** $INFECTED_COUNT" >> scanner-summaries/clamav.md
          echo "**Scan Errors:** $ERROR_COUNT" >> scanner-summaries/clamav.md
          echo "" >> scanner-summaries/clamav.md

          if [ "$INFECTED_COUNT" -gt 0 ]; then
            echo "üö® **WARNING:** Malware detected in your repository!" >> scanner-summaries/clamav.md
            echo "" >> scanner-summaries/clamav.md

            # List infections if available
            if [ -f "clamav-reports/clamav-report.json" ] && command -v jq >/dev/null 2>&1; then
              echo "**Detected Infections:**" >> scanner-summaries/clamav.md
              jq -r '.results[]? | select(.status == "infected") | "- \(.file): \(.infection // "Unknown")"' clamav-reports/clamav-report.json 2>/dev/null >> scanner-summaries/clamav.md || true
              echo "" >> scanner-summaries/clamav.md
            fi
          fi

          echo "**üìÅ Artifacts:** [ClamAV Reports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> scanner-summaries/clamav.md
        else
          echo "**Status:** ‚è≠Ô∏è Skipped" >> scanner-summaries/clamav.md
        fi

        echo "" >> scanner-summaries/clamav.md
        echo "</details>" >> scanner-summaries/clamav.md
        echo "" >> scanner-summaries/clamav.md
      continue-on-error: true

    - name: Upload ClamAV summary section
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scanner-summary-clamav
        path: scanner-summaries/clamav.md
        retention-days: 7
      continue-on-error: true
