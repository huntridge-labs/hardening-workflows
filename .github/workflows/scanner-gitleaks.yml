name: Gitleaks Secrets Scanner

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        type: boolean
        default: true
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  secrets-detection:
    name: Secrets Detection - Gitleaks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run Gitleaks Secrets Detection
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      continue-on-error: true

    - name: Organize Gitleaks results
      run: |
        echo "ðŸ“¦ Organizing Gitleaks results into directory..."
        mkdir -p gitleaks-reports
        if [ -f results.json ]; then
          mv results.json gitleaks-reports/
        fi
        if [ -f results.sarif ]; then
          mv results.sarif gitleaks-reports/
        fi
        echo "Generated Gitleaks files:"
        ls -la gitleaks-reports/ || echo "No files generated"
      continue-on-error: true

    - name: Upload Gitleaks artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-reports
        path: gitleaks-reports/
        retention-days: 30
      if: always()

    - name: Upload SARIF to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: inputs.enable_code_security == true && always() && github.actor != 'nektos/act' && hashFiles('results.sarif') != ''
      with:
        sarif_file: results.sarif
        category: secrets-gitleaks
      continue-on-error: true
