name: Gitleaks Secrets Scanner

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        type: boolean
        default: true
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  secrets-detection:
    name: Secrets Detection - Gitleaks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Install Gitleaks
      run: |
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run Gitleaks Secrets Detection
      run: |
        echo "ðŸ”‘ Scanning for secrets and credentials..."
        mkdir -p gitleaks-reports

        echo "Generating SARIF report..."
        gitleaks detect --source . --report-format sarif --report-path gitleaks-reports/gitleaks-report.sarif --exit-code 0 || true

        echo "Generating JSON report..."
        gitleaks detect --source . --report-format json --report-path gitleaks-reports/gitleaks-report.json --exit-code 0 || true

        cp gitleaks-reports/* . 2>/dev/null || true

        echo "Generated Gitleaks files:"
        ls -la gitleaks-reports/

        if [ -f "gitleaks-reports/gitleaks-report.json" ]; then
          echo "Gitleaks results:"
          if [ -s "gitleaks-reports/gitleaks-report.json" ]; then
            python3 -c "import json; data=json.load(open('gitleaks-reports/gitleaks-report.json')); print(f'Found {len(data)} potential secrets')" 2>/dev/null || echo "Could not parse results"
          else
            echo "No secrets detected"
          fi
        fi
      continue-on-error: true

    - name: Upload Gitleaks artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gitleaks-reports
        path: |
          gitleaks-report.json
          gitleaks-reports/
        retention-days: 30
      if: always()

    - name: Upload Gitleaks SARIF
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gitleaks-report.sarif
      if: inputs.enable_code_security == true && always() && github.actor != 'nektos/act' && hashFiles('gitleaks-report.sarif') != ''
      continue-on-error: true
