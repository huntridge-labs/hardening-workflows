name: Reusable Security Hardening Pipeline

on:
  workflow_call:
    inputs:
      scanners:
        description: 'Comma-separated list of scanners to run (codeql, semgrep, bandit, gitleaks, container, infrastructure, lint, all, sast, secrets, etc.)'
        required: false
        default: 'all'
        type: string
      scan_type:
        description: '(Deprecated) Legacy scan type selector. Prefer the scanners input.'
        required: false
        default: ''
        type: string
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.12'
        type: string
      aws_region:
        description: 'AWS region for infrastructure scans'
        required: false
        default: 'us-east-1'
        type: string
      iac_path:
        description: 'Directory that contains infrastructure-as-code (Terraform) files'
        required: false
        default: 'infrastructure'
        type: string
      post_pr_comment:
        description: 'Whether to post PR comments'
        required: false
        default: true
        type: boolean
      codeql_languages:
        description: 'Comma-separated list of languages for CodeQL analysis (e.g., "python,javascript" or "python")'
        required: false
        default: 'python,javascript'
        type: string
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository (required for CodeQL scanning)'
        required: false
        default: false
        type: boolean
    secrets:
      AWS_ACCOUNT_ID:
        description: 'AWS Account ID for infrastructure scans'
        required: false

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write
  checks: write
  id-token: write

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_REGION: ${{ inputs.aws_region }}
  PYTHON_VERSION: ${{ inputs.python_version }}

jobs:
  scan-coordinator:
    name: Scan Coordinator
    runs-on: ubuntu-latest
    if: ${{ !cancelled() }}
    outputs:
      selected_scanners: ${{ steps.resolve.outputs.selected_scanners }}
      selected_scanners_json: ${{ steps.resolve.outputs.selected_scanners_json }}
      run_codeql: ${{ steps.resolve.outputs.run_codeql }}
      run_semgrep: ${{ steps.resolve.outputs.run_semgrep }}
      run_bandit: ${{ steps.resolve.outputs.run_bandit }}
      run_gitleaks: ${{ steps.resolve.outputs.run_gitleaks }}
      run_container: ${{ steps.resolve.outputs.run_container }}
      run_infrastructure: ${{ steps.resolve.outputs.run_infrastructure }}
      run_lint: ${{ steps.resolve.outputs.run_lint }}
      run_any: ${{ steps.resolve.outputs.run_any }}

    steps:
    - name: Resolve scanner selection
      id: resolve
      shell: bash
      run: |
        set -euo pipefail

        declare -A RUN=(
          [codeql]=false
          [semgrep]=false
          [bandit]=false
          [gitleaks]=false
          [container]=false
          [infrastructure]=false
          [lint]=false
        )

        DEFAULT_SCANNERS=(codeql semgrep bandit gitleaks container infrastructure)
        SELECTED=()

        normalize() {
          echo "$1" | tr '[:upper:]' '[:lower:]' | tr -d ' \t' | tr '_' '-'
        }

        add_scanner() {
          local key="$1"
          if [[ -z "${RUN[$key]+_}" ]]; then
            echo "::notice title=Unknown scanner token::Scanner '$key' is not recognized and will be ignored."
            return
          fi
          if [[ "${RUN[$key]}" != "true" ]]; then
            RUN[$key]=true
            SELECTED+=("$key")
          fi
        }

        reset_selection() {
          SELECTED=()
          for key in "${!RUN[@]}"; do
            RUN[$key]=false
          done
        }

        apply_token() {
          local token="$1"
          case "$token" in
            '' ) ;;
            all|full)
              for key in "${DEFAULT_SCANNERS[@]}"; do add_scanner "$key"; done
              ;;
            sast|sast-only)
              for key in codeql semgrep bandit gitleaks; do add_scanner "$key"; done
              ;;
            secrets|secrets-only)
              add_scanner gitleaks
              ;;
            codeql|code-ql)
              add_scanner codeql
              ;;
            semgrep|opengrep|open-grep)
              add_scanner semgrep
              ;;
            bandit)
              add_scanner bandit
              ;;
            gitleaks|git-leaks)
              add_scanner gitleaks
              ;;
            container|containers|container-scan|docker)
              add_scanner container
              ;;
            infrastructure|infra|iac|terraform)
              add_scanner infrastructure
              ;;
            lint|linting|code-quality)
              add_scanner lint
              ;;
            none|off)
              reset_selection
              ;;
            *)
              echo "::notice title=Unknown scanner token::Value '$token' is not recognized and will be ignored."
              ;;
          esac
        }

        SCANNERS_RAW="${{ inputs.scanners }}"
        SCAN_TYPE_RAW="$(normalize "${{ inputs.scan_type }}")"

        if [[ -z "$SCANNERS_RAW" || "$SCANNERS_RAW" == "default" ]]; then
          case "$SCAN_TYPE_RAW" in
            codeql-only)
              SCANNERS_RAW='codeql'
              ;;
            sast-only)
              SCANNERS_RAW='sast'
              ;;
            container-only)
              SCANNERS_RAW='container'
              ;;
            infrastructure-only)
              SCANNERS_RAW='infrastructure'
              ;;
            full|'')
              SCANNERS_RAW='all'
              ;;
            *)
              echo "::notice title=Unknown legacy scan type::Scan type '$SCAN_TYPE_RAW' not recognized. Falling back to 'all'."
              SCANNERS_RAW='all'
              ;;
          esac
        fi

        IFS=',' read -ra TOKENS <<< "$SCANNERS_RAW"
        for raw in "${TOKENS[@]}"; do
          apply_token "$(normalize "$raw")"
        done

        if [[ ${#SELECTED[@]} -eq 0 ]]; then
          for key in "${DEFAULT_SCANNERS[@]}"; do add_scanner "$key"; done
        fi

        RUN_ANY=false
        for key in "${!RUN[@]}"; do
          if [[ "${RUN[$key]}" == "true" ]]; then
            RUN_ANY=true
          fi
          echo "run_${key}=${RUN[$key]}" >> "$GITHUB_OUTPUT"
        done

        if [[ "$RUN_ANY" == "false" ]]; then
          echo "::warning title=No scanners selected::No scanners were selected. The workflow will execute the summary only."
        fi

        # Check GitHub Code Security integration
        ENABLE_CODE_SECURITY="${{ inputs.enable_code_security }}"
        if [[ "${RUN[codeql]}" == "true" && "$ENABLE_CODE_SECURITY" != "true" ]]; then
          echo "::warning title=CodeQL Disabled::GitHub Code Security is not enabled for this repository. CodeQL scanning will be skipped."
          RUN[codeql]=false
          # Remove codeql from SELECTED array
          SELECTED=("${SELECTED[@]/codeql}")
        fi

        echo "run_any=$RUN_ANY" >> "$GITHUB_OUTPUT"

        SELECTED_STR=$(IFS=','; echo "${SELECTED[*]}")
        if [[ -z "$SELECTED_STR" ]]; then
          SELECTED_STR=""
        fi

        if [[ ${#SELECTED[@]} -eq 0 ]]; then
          SELECTED_JSON='[]'
        else
          SELECTED_JSON='['
          for item in "${SELECTED[@]}"; do
            SELECTED_JSON+="\"$item\","
          done
          SELECTED_JSON="${SELECTED_JSON%,}]"
        fi

        echo "selected_scanners=$SELECTED_STR" >> "$GITHUB_OUTPUT"
        echo "selected_scanners_json=$SELECTED_JSON" >> "$GITHUB_OUTPUT"

        echo ""
        echo "� Resolved scanners: ${SELECTED_STR:-none}"
        echo "📌 Legacy scan_type input: ${SCAN_TYPE_RAW:-'<not provided>'}"

  code-quality-linting:
    name: Code Quality & Linting
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_lint == 'true'
    uses: ./.github/workflows/linting.yml
    permissions:
      contents: read
      pull-requests: write
      checks: write

  scanner-codeql:
    name: CodeQL Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_codeql == 'true'
    uses: ./.github/workflows/scanner-codeql.yml
    with:
      codeql_languages: ${{ inputs.codeql_languages }}
      post_pr_comment: ${{ inputs.post_pr_comment }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  scanner-semgrep:
    name: Semgrep Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_semgrep == 'true'
    uses: ./.github/workflows/scanner-semgrep.yml
    with:
      post_pr_comment: ${{ inputs.post_pr_comment }}
      enable_code_security: ${{ inputs.enable_code_security }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  scanner-bandit:
    name: Bandit Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_bandit == 'true'
    uses: ./.github/workflows/scanner-bandit.yml
    with:
      post_pr_comment: ${{ inputs.post_pr_comment }}
      enable_code_security: ${{ inputs.enable_code_security }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  scanner-gitleaks:
    name: Gitleaks Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_gitleaks == 'true'
    uses: ./.github/workflows/scanner-gitleaks.yml
    with:
      post_pr_comment: ${{ inputs.post_pr_comment }}
      enable_code_security: ${{ inputs.enable_code_security }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  scanner-container:
    name: Container Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_container == 'true'
    uses: ./.github/workflows/container-scan.yml
    with:
      post_pr_comment: ${{ inputs.post_pr_comment }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  scanner-infrastructure:
    name: Infrastructure Scanner
    needs: scan-coordinator
    if: needs.scan-coordinator.outputs.run_infrastructure == 'true'
    uses: ./.github/workflows/infrastructure.yml
    with:
      iac_path: ${{ inputs.iac_path }}
      python_version: ${{ inputs.python_version }}
      aws_region: ${{ inputs.aws_region }}
    permissions:
      contents: read
      security-events: write
      actions: read
      pull-requests: write
    secrets: inherit

  security-summary:
    name: Security Hardening Summary
    runs-on: ubuntu-latest
    needs:
      - scan-coordinator
      - code-quality-linting
      - scanner-codeql
      - scanner-semgrep
      - scanner-bandit
      - scanner-gitleaks
      - scanner-container
      - scanner-infrastructure
    if: always()

    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v5
      continue-on-error: true

    - name: Create comprehensive security report
      run: |
        echo "# 🛡️ Security Analysis Summary" > security-hardening-report.md
        echo "" >> security-hardening-report.md
        echo "**Repository:** ${{ github.repository }}" >> security-hardening-report.md
        echo "**Branch:** ${{ github.ref_name }}" >> security-hardening-report.md
        echo "**Generated:** $(date)" >> security-hardening-report.md
        echo "" >> security-hardening-report.md

        # Count security issues from SARIF files
        TOTAL_ISSUES=0
        if command -v jq >/dev/null 2>&1; then
          for sarif_file in $(find . -name "*.sarif" 2>/dev/null); do
            if [ -f "$sarif_file" ] && [ -s "$sarif_file" ]; then
              issues=$(jq -r '.runs[]?.results[]? | .ruleId' "$sarif_file" 2>/dev/null | wc -l || echo 0)
              TOTAL_ISSUES=$((TOTAL_ISSUES + issues))
            fi
          done
        fi

        echo "## 📊 Security Score" >> security-hardening-report.md
        echo "" >> security-hardening-report.md
        echo "**Total Issues Found:** $TOTAL_ISSUES" >> security-hardening-report.md
        echo "" >> security-hardening-report.md

        if [ "$TOTAL_ISSUES" -eq 0 ]; then
          echo "✅ **Excellent!** No security issues detected." >> security-hardening-report.md
        elif [ "$TOTAL_ISSUES" -lt 5 ]; then
          echo "🟡 **Good** - Few issues found, review recommended." >> security-hardening-report.md
        else
          echo "🔴 **Attention Required** - Multiple security issues found." >> security-hardening-report.md
        fi

        echo "" >> security-hardening-report.md
        echo "## 📋 Next Steps" >> security-hardening-report.md
        echo "1. Download and review security reports from workflow artifacts" >> security-hardening-report.md
        echo "2. Address any critical or high-severity findings" >> security-hardening-report.md
        echo "3. Consider enabling automated dependency updates" >> security-hardening-report.md

    - name: Upload comprehensive security report
      uses: actions/upload-artifact@v4
      with:
        name: security-hardening-report
        path: security-hardening-report.md
        retention-days: 90

    - name: Comment PR with security summary
      if: github.event_name == 'pull_request' && (inputs.post_pr_comment == true || inputs.post_pr_comment == null)
      uses: actions/github-script@v8
      continue-on-error: true
      with:
        script: |
          const fs = require('fs');

          console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
          console.log('Event name:', context.eventName);
          console.log('PR number:', context.issue?.number);

          try {
            const report = fs.readFileSync('security-hardening-report.md', 'utf8');
            const summary = report.length > 65000 ?
              report.substring(0, 65000) + '\n\n... (report truncated, download full report from artifacts)' :
              report;

            const commentBody = `## 🛡️ Security Hardening Pipeline Results\n\n<!-- security-hardening-comment-marker -->\n\n${summary}`;

            // Check for existing security hardening comments to update instead of creating new ones
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            console.log('🔍 Found', comments.data.length, 'existing comments');

            const existingComment = comments.data.find(comment => {
              const hasMarker = comment.body.includes('security-hardening-comment-marker');
              const isGitHubActions = comment.user.login === 'github-actions[bot]' || comment.user.type === 'Bot';
              console.log('Comment from', comment.user.login, 'type:', comment.user.type, 'has marker:', hasMarker);
              return hasMarker && isGitHubActions;
            });

            if (existingComment) {
              // Update existing comment with latest information
              console.log('🔄 Updating existing security hardening comment');
              const timestamp = new Date().toLocaleString();
              const commitSha = context.sha.substring(0, 8);
              const updatedBody = commentBody + `\n\n---\n*Last updated: ${timestamp} | Commit: ${commitSha} | [View Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*`;

              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: updatedBody
              });
            } else {
              // Create new comment
              console.log('📝 Creating new security hardening comment');
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

            console.log('✅ Successfully posted/updated security hardening summary comment');
          } catch (error) {
            console.log('❌ Failed to post security summary comment:', error.message);
            console.log('Error status:', error.status);

            if (error.status === 403) {
              console.log('🔒 Permission denied - this can happen when:');
              console.log('   • Running on a fork (security restriction)');
              console.log('   • Missing pull-requests: write permission');
              console.log('   • Repository settings restrict PR comments');
            } else if (error.status === 404) {
              console.log('🔍 Resource not found - check if PR exists');
            }

            console.log('📋 Security hardening report is still available in workflow artifacts');
          }
