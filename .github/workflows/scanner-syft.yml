name: Generate SBOM

on:
  workflow_call:
    inputs:
      enable_code_security:
        description: 'Whether GitHub Code Security is enabled for this repository'
        required: false
        type: boolean
        default: false
      scan-path:
        description: 'Directory or file path to scan'
        required: false
        type: string
        default: '.'
      scan-image:
        description: 'Container image to scan'
        required: false
        type: string

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  generate-sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Determine scan target
        id: target
        run: |
          if [ -n "${{ inputs.scan-image }}" ]; then
            target="${{ inputs.scan-image }}"
            type="image"
            prefix=$(echo "$target" | sed 's/:/-/g' | sed 's/\//-/g')
          else
            target="${{ inputs.scan-path }}"
            type="path"
            prefix=$(basename "$target")
          fi
          mkdir -p .syft/sboms
          output_file=".syft/sboms/${prefix}.json"
          output_table=".syft/sboms/${prefix}.txt"
          echo "target=$target" >> $GITHUB_OUTPUT
          echo "type=$type" >> $GITHUB_OUTPUT
          echo "prefix=$prefix" >> $GITHUB_OUTPUT
          echo "output_file=$output_file" >> $GITHUB_OUTPUT
          echo "output_table=$output_table" >> $GITHUB_OUTPUT

      - name: Generate CycloneDX JSON Path SBOM
        uses: anchore/sbom-action@v0.20.8
        if: steps.target.outputs.type == 'path'
        with:
          path: ${{ steps.target.outputs.target }}
          format: cyclonedx-json
          output-file: ${{ steps.target.outputs.output_file }}

      - name: Generate CycloneDX JSON Image SBOM
        uses: anchore/sbom-action@v0.20.8
        if: steps.target.outputs.type == 'image'
        with:
          image: ${{ steps.target.outputs.target }}
          format: cyclonedx-json
          output-file: ${{ steps.target.outputs.output_file }}

      - name: Generate human-readable SBOM (table)
        run: |
          syft ${{ steps.target.outputs.target }} -o table > ${{ steps.target.outputs.output_table }}

      - name: Upload SBOM Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ steps.target.outputs.prefix }}
          path: |
            ${{ steps.target.outputs.output_file }}
            ${{ steps.target.outputs.output_table }}

      - name: Create SBOM Summary
        run: |
          # Get Syft version from 'syft version' output
          SYFT_VERSION=$(syft version 2>/dev/null | grep "^Version:" | awk '{print $2}' || echo "unknown")
          echo "<details>" > sbom.md
          echo "<summary>üîç SBOM Details</summary>" >> sbom.md
          echo "" >> sbom.md
          echo "## üì¶ SBOM Summary" >> sbom.md
          echo "" >> sbom.md
          echo "**Target:** \`${{ steps.target.outputs.target }}\`" >> sbom.md
          echo "**Generated by:** Syft v$SYFT_VERSION" >> sbom.md
          echo "" >> sbom.md
          echo "### Formats" >> sbom.md
          echo "- **CycloneDX JSON**: \`${{ steps.target.outputs.output_file }}\`" >> sbom.md
          echo "- **Human-readable Table**: \`${{ steps.target.outputs.output_table }}\`" >> sbom.md
          echo "" >> sbom.md
          echo "### üì• Download Artifacts" >> sbom.md
          echo "- [Download SBOM Package (sbom-${{ steps.target.outputs.prefix }})](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> sbom.md
          echo "" >> sbom.md
          echo "### Usage" >> sbom.md
          echo "- **View** the human-readable table directly in the artifact" >> sbom.md
          echo "- **Import** the CycloneDX JSON into a viewer or Dependency-Track" >> sbom.md
          echo "</details>" >> sbom.md

      - name: Upload SBOM Summary
        uses: actions/upload-artifact@v4
        with:
          name: scanner-summary-sbom
          path: sbom.md
